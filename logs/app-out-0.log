2017-08-23 10:22 +08:00: process controller: article.js...
2017-08-23 10:22 +08:00: register URL mapping: GET /article
2017-08-23 10:22 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:22 +08:00: register URL mapping: GET /comment
2017-08-23 10:22 +08:00: process controller: index.js...
register URL mapping: GET /
2017-08-23 10:22 +08:00: process controller: me.js...
2017-08-23 10:22 +08:00: register URL mapping: GET /me
2017-08-23 10:22 +08:00: process controller: postedit.js...
2017-08-23 10:22 +08:00: register URL mapping: GET /postedit
2017-08-23 10:22 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 10:22 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:22 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:23 +08:00: Process GET /comment...
2017-08-23 10:23 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 10:23 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:23 +08:00: Process GET /static/css/base.css...
2017-08-23 10:23 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/bootstrap.js...
2017-08-23 10:23 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:23 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:23 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:23 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:23 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:23 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:23 +08:00: Process GET /comment...
2017-08-23 10:23 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:23 +08:00: Process GET /static/css/default.css...
2017-08-23 10:23 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:23 +08:00: Process GET /static/css/base.css...
2017-08-23 10:23 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:23 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:23 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:23 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:23 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:23 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:23 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:23 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:36 +08:00: Process GET /comment...
2017-08-23 10:36 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:36 +08:00: Process GET /static/css/default.css...
2017-08-23 10:36 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 10:36 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:36 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:36 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:36 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:36 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:37 +08:00: Process GET /comment...
2017-08-23 10:37 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:37 +08:00: Process GET /static/css/default.css...
2017-08-23 10:37 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:37 +08:00: Process GET /static/css/base.css...
2017-08-23 10:37 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:37 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:37 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:37 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:37 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:37 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:37 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:37 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:38 +08:00: Process GET /comment...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:38 +08:00: Process GET /static/css/default.css...
2017-08-23 10:38 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:38 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 10:38 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:38 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 10:38 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:38 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:38 +08:00: Process GET /comment...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 10:38 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:38 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:38 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 10:38 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:38 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:38 +08:00: Process GET /comment...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:38 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 10:38 +08:00: Process GET /static/css/base.css...
2017-08-23 10:38 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:38 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:38 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:38 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:38 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:38 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:38 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:38 +08:00: Process GET /comment...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:38 +08:00: Process GET /static/css/default.css...
2017-08-23 10:38 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:38 +08:00: Process GET /static/css/base.css...
2017-08-23 10:38 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:38 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:38 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:38 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:38 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:38 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:38 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:38 +08:00: Process GET /comment...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:38 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 10:38 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:38 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:38 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:38 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:38 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:38 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:38 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:39 +08:00: Process GET /comment...
2017-08-23 10:39 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:39 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
2017-08-23 10:39 +08:00: Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:39 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:39 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:39 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:39 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:40 +08:00: process controller: article.js...
2017-08-23 10:40 +08:00: register URL mapping: GET /article
2017-08-23 10:40 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:40 +08:00: register URL mapping: GET /comment
2017-08-23 10:40 +08:00: process controller: index.js...
2017-08-23 10:40 +08:00: register URL mapping: GET /
2017-08-23 10:40 +08:00: process controller: me.js...
2017-08-23 10:40 +08:00: register URL mapping: GET /me
2017-08-23 10:40 +08:00: process controller: postedit.js...
2017-08-23 10:40 +08:00: register URL mapping: GET /postedit
2017-08-23 10:40 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:40 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:40 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:40 +08:00: Process GET /comment...
2017-08-23 10:40 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:40 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:40 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:40 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:40 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:40 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:40 +08:00: Process GET /comment...
2017-08-23 10:40 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:40 +08:00: Process GET /static/css/default.css...
2017-08-23 10:40 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
2017-08-23 10:40 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:40 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:40 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:40 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:40 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:40 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:40 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:41 +08:00: Process GET /comment...
2017-08-23 10:41 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 10:41 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:41 +08:00: Process GET /static/css/base.css...
2017-08-23 10:41 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:41 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:41 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:41 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:41 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:41 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:41 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:41 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:41 +08:00: Process GET /comment...
2017-08-23 10:41 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:41 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:41 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:41 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:41 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:41 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:41 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:41 +08:00: Process GET /comment...
2017-08-23 10:41 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:41 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 10:41 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:41 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:41 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:41 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:41 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:41 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:41 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:42 +08:00: Process GET /comment...
2017-08-23 10:42 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 10:42 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:42 +08:00: Process GET /static/css/base.css...
2017-08-23 10:42 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:42 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:42 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:42 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:42 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:42 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:42 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:42 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:42 +08:00: Process GET /comment...
2017-08-23 10:42 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 10:42 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:42 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 10:42 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:42 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:42 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 10:42 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:42 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:42 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:42 +08:00: Process GET /comment...
2017-08-23 10:42 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:42 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 10:42 +08:00: Process GET /static/css/base.css...
2017-08-23 10:42 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:42 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:42 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:42 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:42 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:42 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:42 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:42 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:43 +08:00: process controller: article.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /article
2017-08-23 10:43 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /comment
2017-08-23 10:43 +08:00: process controller: index.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /
2017-08-23 10:43 +08:00: process controller: me.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /me
2017-08-23 10:43 +08:00: process controller: postedit.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /postedit
2017-08-23 10:43 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 10:43 +08:00: register URL mapping: POST /postDraft
2017-08-23 10:43 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:43 +08:00: Process GET /comment...
2017-08-23 10:43 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:43 +08:00: Process GET /static/css/default.css...
2017-08-23 10:43 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:43 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:43 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:43 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
Process GET /static/css/comment.css...
2017-08-23 10:43 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:43 +08:00: process controller: article.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /article
2017-08-23 10:43 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /comment
2017-08-23 10:43 +08:00: process controller: index.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /
2017-08-23 10:43 +08:00: process controller: me.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /me
2017-08-23 10:43 +08:00: process controller: postedit.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /postedit
2017-08-23 10:43 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:43 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:43 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:43 +08:00: Process GET /comment...
2017-08-23 10:43 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 10:43 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:43 +08:00: Process GET /static/css/base.css...
2017-08-23 10:43 +08:00: Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:43 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:43 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:43 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:43 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:43 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:43 +08:00: process controller: article.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /article
2017-08-23 10:43 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /comment
2017-08-23 10:43 +08:00: process controller: index.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /
2017-08-23 10:43 +08:00: process controller: me.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /me
2017-08-23 10:43 +08:00: process controller: postedit.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /postedit
2017-08-23 10:43 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:43 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:43 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:43 +08:00: process controller: article.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /article
2017-08-23 10:43 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /comment
2017-08-23 10:43 +08:00: process controller: index.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /
2017-08-23 10:43 +08:00: process controller: me.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /me
2017-08-23 10:43 +08:00: process controller: postedit.js...
2017-08-23 10:43 +08:00: register URL mapping: GET /postedit
2017-08-23 10:43 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:43 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:43 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:43 +08:00: Process GET /comment...
2017-08-23 10:43 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:43 +08:00: Process GET /static/css/default.css...
2017-08-23 10:43 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:43 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 10:43 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:43 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:43 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:44 +08:00: Process GET /comment...
2017-08-23 10:44 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:44 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 10:44 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:44 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:44 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:44 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:44 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:44 +08:00: Process GET /comment...
2017-08-23 10:44 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:44 +08:00: Process GET /static/css/default.css...
2017-08-23 10:44 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:44 +08:00: Process GET /static/css/base.css...
2017-08-23 10:44 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:44 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:44 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:44 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:44 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:44 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:44 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:44 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:45 +08:00: Process GET /comment...
2017-08-23 10:45 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:45 +08:00: Process GET /static/css/default.css...
2017-08-23 10:45 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:45 +08:00: Process GET /static/css/base.css...
2017-08-23 10:45 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:45 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:45 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:45 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:45 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:45 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:45 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:45 +08:00: Process GET /comment...
2017-08-23 10:45 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:45 +08:00: Process GET /static/css/default.css...
2017-08-23 10:45 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:45 +08:00: Process GET /static/css/base.css...
2017-08-23 10:45 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:45 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:45 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:45 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:45 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:45 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:45 +08:00: Process GET /comment...
2017-08-23 10:45 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:45 +08:00: Process GET /static/css/default.css...
2017-08-23 10:45 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:45 +08:00: Process GET /static/css/base.css...
2017-08-23 10:45 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:45 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:45 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 10:45 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:45 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:45 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:48 +08:00: Process GET /comment...
2017-08-23 10:48 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:48 +08:00: Process GET /static/css/default.css...
2017-08-23 10:48 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:48 +08:00: Process GET /static/css/base.css...
2017-08-23 10:48 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:48 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:48 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 10:48 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:48 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:48 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:49 +08:00: process controller: article.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /article
2017-08-23 10:49 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /comment
2017-08-23 10:49 +08:00: process controller: index.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /
2017-08-23 10:49 +08:00: process controller: me.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /me
2017-08-23 10:49 +08:00: process controller: postedit.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /postedit
2017-08-23 10:49 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:49 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:49 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:49 +08:00: Process GET /comment...
2017-08-23 10:49 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:49 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:49 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:49 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:49 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:49 +08:00: process controller: article.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /article
2017-08-23 10:49 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /comment
2017-08-23 10:49 +08:00: process controller: index.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /
2017-08-23 10:49 +08:00: process controller: me.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /me
2017-08-23 10:49 +08:00: process controller: postedit.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /postedit
2017-08-23 10:49 +08:00: register URL mapping: POST /postedit
2017-08-23 10:49 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:49 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 10:49 +08:00: register URL mapping: POST /postDraft
2017-08-23 10:49 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:49 +08:00: Process GET /comment...
2017-08-23 10:49 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 10:49 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:49 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:49 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:49 +08:00: process controller: article.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /article
2017-08-23 10:49 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /comment
2017-08-23 10:49 +08:00: process controller: index.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /
2017-08-23 10:49 +08:00: process controller: me.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /me
2017-08-23 10:49 +08:00: process controller: postedit.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /postedit
2017-08-23 10:49 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:49 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:49 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:49 +08:00: Process GET /comment...
2017-08-23 10:49 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 10:49 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:49 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:49 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:49 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:49 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:49 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:49 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:49 +08:00: process controller: article.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /article
2017-08-23 10:49 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /comment
2017-08-23 10:49 +08:00: process controller: index.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /
2017-08-23 10:49 +08:00: process controller: me.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /me
2017-08-23 10:49 +08:00: process controller: postedit.js...
2017-08-23 10:49 +08:00: register URL mapping: GET /postedit
2017-08-23 10:49 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:49 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 10:49 +08:00: register URL mapping: POST /postDraft
2017-08-23 10:49 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:49 +08:00: Process GET /comment...
2017-08-23 10:49 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:49 +08:00: Process GET /static/css/default.css...
2017-08-23 10:49 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:49 +08:00: Process GET /static/css/base.css...
2017-08-23 10:49 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:49 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:49 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 10:49 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:49 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:49 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:50 +08:00: process controller: article.js...
2017-08-23 10:50 +08:00: register URL mapping: GET /article
2017-08-23 10:50 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:50 +08:00: register URL mapping: GET /comment
2017-08-23 10:50 +08:00: process controller: index.js...
2017-08-23 10:50 +08:00: register URL mapping: GET /
2017-08-23 10:50 +08:00: process controller: me.js...
2017-08-23 10:50 +08:00: register URL mapping: GET /me
2017-08-23 10:50 +08:00: process controller: postedit.js...
2017-08-23 10:50 +08:00: register URL mapping: GET /postedit
2017-08-23 10:50 +08:00: register URL mapping: POST /postedit
2017-08-23 10:50 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:50 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 10:50 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:50 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:51 +08:00: Process GET /login...
2017-08-23 10:58 +08:00: Process GET /comment...
2017-08-23 10:58 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:58 +08:00: Process GET /static/css/default.css...
2017-08-23 10:58 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:58 +08:00: Process GET /static/css/base.css...
2017-08-23 10:58 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:58 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:58 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:58 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:58 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:58 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:58 +08:00: process controller: article.js...
2017-08-23 10:58 +08:00: register URL mapping: GET /article
2017-08-23 10:58 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:58 +08:00: register URL mapping: GET /comment
2017-08-23 10:58 +08:00: process controller: index.js...
2017-08-23 10:58 +08:00: register URL mapping: GET /
2017-08-23 10:58 +08:00: process controller: me.js...
2017-08-23 10:58 +08:00: register URL mapping: GET /me
2017-08-23 10:58 +08:00: process controller: postedit.js...
2017-08-23 10:58 +08:00: register URL mapping: GET /postedit
2017-08-23 10:58 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 10:58 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:58 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:58 +08:00: Process GET /comment...
2017-08-23 10:58 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:58 +08:00: Process GET /static/css/default.css...
2017-08-23 10:58 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:58 +08:00: Process GET /static/css/base.css...
2017-08-23 10:58 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:58 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:58 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:58 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:58 +08:00: Process GET /static/js/marked.js...
2017-08-23 10:58 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:58 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:58 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:59 +08:00: process controller: article.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /article
2017-08-23 10:59 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /comment
2017-08-23 10:59 +08:00: process controller: index.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /
2017-08-23 10:59 +08:00: process controller: me.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /me
2017-08-23 10:59 +08:00: process controller: postedit.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /postedit
2017-08-23 10:59 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 10:59 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 10:59 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:59 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:59 +08:00: Process GET /comment...
2017-08-23 10:59 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 10:59 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 10:59 +08:00: Process GET /static/css/comment.css...
2017-08-23 10:59 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 10:59 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 10:59 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:59 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 10:59 +08:00: process controller: article.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /article
2017-08-23 10:59 +08:00: register URL mapping: POST /article
2017-08-23 10:59 +08:00: process controller: comment.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /comment
2017-08-23 10:59 +08:00: process controller: index.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /
2017-08-23 10:59 +08:00: process controller: me.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /me
2017-08-23 10:59 +08:00: process controller: postedit.js...
2017-08-23 10:59 +08:00: register URL mapping: GET /postedit
2017-08-23 10:59 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 10:59 +08:00: register URL mapping: POST /saveDraft
2017-08-23 10:59 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 10:59 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 10:59 +08:00: Process GET /comment...
2017-08-23 10:59 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 10:59 +08:00: Process GET /static/css/default.css...
2017-08-23 10:59 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 10:59 +08:00: Process GET /static/css/base.css...
2017-08-23 10:59 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 10:59 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 10:59 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 10:59 +08:00: Process GET /static/js/highlight.js...
2017-08-23 10:59 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 10:59 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:00 +08:00: process controller: article.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /article
2017-08-23 11:00 +08:00: register URL mapping: POST /article
2017-08-23 11:00 +08:00: process controller: comment.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /comment
process controller: index.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /
2017-08-23 11:00 +08:00: process controller: me.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /me
2017-08-23 11:00 +08:00: process controller: postedit.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /postedit
2017-08-23 11:00 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:00 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:00 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:00 +08:00: Process GET /comment...
2017-08-23 11:00 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:00 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:00 +08:00: Process GET /static/css/default.css...
2017-08-23 11:00 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:00 +08:00: Process GET /static/css/base.css...
2017-08-23 11:00 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:00 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:00 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:00 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:00 +08:00: process controller: article.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /article
2017-08-23 11:00 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /comment
2017-08-23 11:00 +08:00: process controller: index.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /
2017-08-23 11:00 +08:00: process controller: me.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /me
2017-08-23 11:00 +08:00: process controller: postedit.js...
2017-08-23 11:00 +08:00: register URL mapping: GET /postedit
2017-08-23 11:00 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 11:00 +08:00: register URL mapping: POST /saveDraft
2017-08-23 11:00 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:00 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:00 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:01 +08:00: process controller: article.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /article
2017-08-23 11:01 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /comment
2017-08-23 11:01 +08:00: process controller: index.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /
2017-08-23 11:01 +08:00: process controller: me.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /me
2017-08-23 11:01 +08:00: process controller: postedit.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /postedit
2017-08-23 11:01 +08:00: register URL mapping: POST /postedit
2017-08-23 11:01 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:01 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:01 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:01 +08:00: Process GET /comment...
2017-08-23 11:01 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:01 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:01 +08:00: Process GET /static/css/default.css...
2017-08-23 11:01 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:01 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 11:01 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:01 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:01 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:01 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/highlight.js...
2017-08-23 11:01 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:01 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:01 +08:00: process controller: article.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /article
2017-08-23 11:01 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /comment
2017-08-23 11:01 +08:00: process controller: index.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /
2017-08-23 11:01 +08:00: process controller: me.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /me
2017-08-23 11:01 +08:00: process controller: postedit.js...
2017-08-23 11:01 +08:00: register URL mapping: GET /postedit
2017-08-23 11:01 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:01 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:01 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:02 +08:00: Process GET /comment...
2017-08-23 11:02 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:02 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:02 +08:00: Process GET /static/css/default.css...
2017-08-23 11:02 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:02 +08:00: Process GET /static/css/base.css...
2017-08-23 11:02 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:02 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:02 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:02 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:02 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:02 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:02 +08:00: process controller: article.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /article
2017-08-23 11:02 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /comment
2017-08-23 11:02 +08:00: process controller: index.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /
2017-08-23 11:02 +08:00: process controller: me.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /me
2017-08-23 11:02 +08:00: process controller: postedit.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /postedit
2017-08-23 11:02 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 11:02 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 11:02 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:02 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:02 +08:00: Process GET /comment...
2017-08-23 11:02 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 11:02 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
2017-08-23 11:02 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:02 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:02 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:02 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:02 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:02 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:02 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:02 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:02 +08:00: process controller: article.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /article
2017-08-23 11:02 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /comment
2017-08-23 11:02 +08:00: process controller: index.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /
2017-08-23 11:02 +08:00: process controller: me.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /me
2017-08-23 11:02 +08:00: process controller: postedit.js...
2017-08-23 11:02 +08:00: register URL mapping: GET /postedit
2017-08-23 11:02 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 11:02 +08:00: register URL mapping: POST /saveDraft
2017-08-23 11:02 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:02 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:02 +08:00: Process GET /comment...
2017-08-23 11:02 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
2017-08-23 11:02 +08:00: Process GET /static/css/default.css...
2017-08-23 11:02 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:02 +08:00: Process GET /static/css/base.css...
2017-08-23 11:02 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:02 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:02 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:02 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:02 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:02 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:02 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:03 +08:00: process controller: article.js...
2017-08-23 11:03 +08:00: register URL mapping: GET /article
2017-08-23 11:03 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:03 +08:00: register URL mapping: GET /comment
2017-08-23 11:03 +08:00: process controller: index.js...
2017-08-23 11:03 +08:00: register URL mapping: GET /
2017-08-23 11:03 +08:00: process controller: me.js...
2017-08-23 11:03 +08:00: register URL mapping: GET /me
2017-08-23 11:03 +08:00: process controller: postedit.js...
2017-08-23 11:03 +08:00: register URL mapping: GET /postedit
2017-08-23 11:03 +08:00: register URL mapping: POST /postedit
2017-08-23 11:03 +08:00: register URL mapping: POST /uploadImage
2017-08-23 11:03 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 11:03 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:03 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:03 +08:00: Process GET /comment...
2017-08-23 11:03 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:03 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:03 +08:00: Process GET /static/css/default.css...
2017-08-23 11:03 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:03 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 11:03 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:03 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:03 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:03 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:03 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:03 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:04 +08:00: process controller: article.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /article
2017-08-23 11:04 +08:00: register URL mapping: POST /article
2017-08-23 11:04 +08:00: process controller: comment.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /comment
process controller: index.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /
2017-08-23 11:04 +08:00: process controller: me.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /me
2017-08-23 11:04 +08:00: process controller: postedit.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /postedit
2017-08-23 11:04 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:04 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:04 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:04 +08:00: Process GET /comment...
2017-08-23 11:04 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 11:04 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
2017-08-23 11:04 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:04 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:04 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:04 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:04 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:04 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:04 +08:00: process controller: article.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /article
2017-08-23 11:04 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /comment
2017-08-23 11:04 +08:00: process controller: index.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /
2017-08-23 11:04 +08:00: process controller: me.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /me
2017-08-23 11:04 +08:00: process controller: postedit.js...
2017-08-23 11:04 +08:00: register URL mapping: GET /postedit
2017-08-23 11:04 +08:00: register URL mapping: POST /postedit
2017-08-23 11:04 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:04 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:04 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:04 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:05 +08:00: process controller: article.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /article
2017-08-23 11:05 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /comment
2017-08-23 11:05 +08:00: process controller: index.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /
2017-08-23 11:05 +08:00: process controller: me.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /me
2017-08-23 11:05 +08:00: process controller: postedit.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /postedit
2017-08-23 11:05 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 11:05 +08:00: register URL mapping: POST /saveDraft
2017-08-23 11:05 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:05 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:05 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:05 +08:00: process controller: article.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /article
2017-08-23 11:05 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /comment
2017-08-23 11:05 +08:00: process controller: index.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /
2017-08-23 11:05 +08:00: process controller: me.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /me
2017-08-23 11:05 +08:00: process controller: postedit.js...
2017-08-23 11:05 +08:00: register URL mapping: GET /postedit
2017-08-23 11:05 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:05 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:05 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:05 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:05 +08:00: Process GET /comment...
2017-08-23 11:05 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 11:05 +08:00: Process GET /static/css/base.css...
2017-08-23 11:05 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:05 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:05 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:05 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:05 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:05 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:05 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:05 +08:00: Process GET /comment...
2017-08-23 11:05 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
2017-08-23 11:05 +08:00: Process GET /static/css/default.css...
2017-08-23 11:05 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:05 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 11:05 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
2017-08-23 11:05 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:05 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:05 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:05 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:05 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:05 +08:00: Process GET /comment...
2017-08-23 11:05 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:05 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:05 +08:00: Process GET /static/css/default.css...
2017-08-23 11:05 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 11:05 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:05 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:05 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:05 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:05 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:05 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:05 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:05 +08:00: Process GET /comment...
2017-08-23 11:05 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
2017-08-23 11:05 +08:00: Process GET /static/css/default.css...
2017-08-23 11:05 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:05 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 11:05 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:05 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:05 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:05 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:05 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:05 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:07 +08:00: process controller: article.js...
2017-08-23 11:07 +08:00: register URL mapping: GET /article
2017-08-23 11:07 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:07 +08:00: register URL mapping: GET /comment
2017-08-23 11:07 +08:00: process controller: index.js...
2017-08-23 11:07 +08:00: register URL mapping: GET /
2017-08-23 11:07 +08:00: process controller: me.js...
2017-08-23 11:07 +08:00: register URL mapping: GET /me
2017-08-23 11:07 +08:00: process controller: postedit.js...
2017-08-23 11:07 +08:00: register URL mapping: GET /postedit
2017-08-23 11:07 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:07 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:07 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:07 +08:00: Process GET /comment...
2017-08-23 11:07 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:07 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:07 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 11:07 +08:00: Process GET /static/css/base.css...
2017-08-23 11:07 +08:00: Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-23 11:07 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:07 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:07 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:07 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:07 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:08 +08:00: Process GET /comment...
2017-08-23 11:08 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
2017-08-23 11:08 +08:00: Process GET /static/css/default.css...
2017-08-23 11:08 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:08 +08:00: Process GET /static/css/base.css...
2017-08-23 11:08 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:08 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
2017-08-23 11:08 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:08 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:08 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:08 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:08 +08:00: Process GET /comment...
2017-08-23 11:08 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:08 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:08 +08:00: Process GET /static/css/default.css...
2017-08-23 11:08 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:08 +08:00: Process GET /static/css/base.css...
2017-08-23 11:08 +08:00: Process GET /static/js/bootstrap.js...
Process GET /static/css/comment.css...
2017-08-23 11:08 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:08 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:08 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:08 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:08 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:08 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:08 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:09 +08:00: Process GET /comment...
2017-08-23 11:09 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
2017-08-23 11:09 +08:00: Process GET /static/css/default.css...
2017-08-23 11:09 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:09 +08:00: Process GET /static/css/base.css...
2017-08-23 11:09 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:09 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:09 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:09 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:09 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:09 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:09 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:09 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:13 +08:00: process controller: article.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /article
2017-08-23 11:13 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /comment
2017-08-23 11:13 +08:00: process controller: index.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /
2017-08-23 11:13 +08:00: process controller: me.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /me
2017-08-23 11:13 +08:00: process controller: postedit.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /postedit
2017-08-23 11:13 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 11:13 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 11:13 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:13 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:13 +08:00: process controller: article.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /article
2017-08-23 11:13 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /comment
2017-08-23 11:13 +08:00: process controller: index.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /
2017-08-23 11:13 +08:00: process controller: me.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /me
2017-08-23 11:13 +08:00: process controller: postedit.js...
2017-08-23 11:13 +08:00: register URL mapping: GET /postedit
2017-08-23 11:13 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:13 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:13 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:13 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:15 +08:00: process controller: article.js...
2017-08-23 11:15 +08:00: register URL mapping: GET /article
2017-08-23 11:15 +08:00: register URL mapping: POST /article
2017-08-23 11:15 +08:00: process controller: comment.js...
2017-08-23 11:15 +08:00: register URL mapping: GET /comment
2017-08-23 11:15 +08:00: process controller: index.js...
2017-08-23 11:15 +08:00: register URL mapping: GET /
2017-08-23 11:15 +08:00: process controller: me.js...
2017-08-23 11:15 +08:00: register URL mapping: GET /me
process controller: postedit.js...
2017-08-23 11:15 +08:00: register URL mapping: GET /postedit
2017-08-23 11:15 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:15 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:15 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:15 +08:00: Process GET /comment...
2017-08-23 11:15 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:15 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 11:15 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:15 +08:00: Process GET /static/css/base.css...
2017-08-23 11:15 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:15 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:15 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:15 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:15 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:15 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:15 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:15 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:16 +08:00: Process GET /comment...
2017-08-23 11:16 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:16 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:16 +08:00: Process GET /static/css/default.css...
2017-08-23 11:16 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:16 +08:00: Process GET /static/css/base.css...
2017-08-23 11:16 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:16 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:16 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:16 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:16 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:16 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:16 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:16 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:17 +08:00: process controller: article.js...
2017-08-23 11:17 +08:00: register URL mapping: GET /article
2017-08-23 11:17 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:17 +08:00: register URL mapping: GET /comment
2017-08-23 11:17 +08:00: process controller: index.js...
2017-08-23 11:17 +08:00: register URL mapping: GET /
2017-08-23 11:17 +08:00: process controller: me.js...
2017-08-23 11:17 +08:00: register URL mapping: GET /me
2017-08-23 11:17 +08:00: process controller: postedit.js...
2017-08-23 11:17 +08:00: register URL mapping: GET /postedit
2017-08-23 11:17 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 11:17 +08:00: register URL mapping: POST /saveDraft
2017-08-23 11:17 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:17 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:19 +08:00: Process GET /comment...
2017-08-23 11:19 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:19 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:19 +08:00: Process GET /static/css/default.css...
2017-08-23 11:19 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 11:19 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:19 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:19 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:19 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:19 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:19 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:19 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:19 +08:00: Process GET /comment...
2017-08-23 11:19 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:19 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:19 +08:00: Process GET /static/css/default.css...
2017-08-23 11:19 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:19 +08:00: Process GET /static/css/base.css...
2017-08-23 11:19 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:19 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:19 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:19 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:19 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:19 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:19 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:19 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:19 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:19 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:19 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:19 +08:00: Process GET /static/css/default.css...
2017-08-23 11:19 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:19 +08:00: Process GET /static/css/base.css...
2017-08-23 11:19 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:19 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:20 +08:00: Process GET /comment...
2017-08-23 11:20 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:20 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 11:20 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:20 +08:00: Process GET /static/css/base.css...
2017-08-23 11:20 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:20 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:20 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:20 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:20 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:20 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:20 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:20 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:20 +08:00: Process GET /comment...
2017-08-23 11:20 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:20 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:20 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 11:20 +08:00: Process GET /static/css/base.css...
2017-08-23 11:20 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:20 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:20 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:20 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:20 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:20 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:20 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:20 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:20 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:20 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:20 +08:00: Process GET /static/css/default.css...
2017-08-23 11:20 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:20 +08:00: Process GET /static/css/base.css...
2017-08-23 11:20 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:20 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:20 +08:00: process controller: article.js...
2017-08-23 11:20 +08:00: register URL mapping: GET /article
2017-08-23 11:20 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:20 +08:00: register URL mapping: GET /comment
2017-08-23 11:20 +08:00: process controller: index.js...
2017-08-23 11:20 +08:00: register URL mapping: GET /
2017-08-23 11:20 +08:00: process controller: me.js...
2017-08-23 11:20 +08:00: register URL mapping: GET /me
2017-08-23 11:20 +08:00: process controller: postedit.js...
2017-08-23 11:20 +08:00: register URL mapping: GET /postedit
2017-08-23 11:20 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:20 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:20 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:20 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:21 +08:00: Process GET /comment...
2017-08-23 11:21 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:21 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:21 +08:00: Process GET /static/css/default.css...
2017-08-23 11:21 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:21 +08:00: Process GET /static/css/base.css...
2017-08-23 11:21 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:21 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:21 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:21 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:21 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:21 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:21 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:21 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:21 +08:00: Process GET /comment...
2017-08-23 11:21 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 11:21 +08:00: Process GET /static/css/base.css...
2017-08-23 11:21 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:21 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:21 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:21 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:21 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:21 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:21 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:21 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:22 +08:00: Process GET /comment...
2017-08-23 11:22 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:22 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:22 +08:00: Process GET /static/css/default.css...
2017-08-23 11:22 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:22 +08:00: Process GET /static/css/base.css...
2017-08-23 11:22 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:22 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:22 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:22 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:22 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:22 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:22 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:22 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:22 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:22 +08:00: Process GET /static/css/default.css...
2017-08-23 11:22 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:22 +08:00: Process GET /static/css/base.css...
2017-08-23 11:22 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:22 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:23 +08:00: Process GET /comment...
2017-08-23 11:23 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
2017-08-23 11:23 +08:00: Process GET /static/css/default.css...
2017-08-23 11:23 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:23 +08:00: Process GET /static/css/base.css...
2017-08-23 11:23 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:23 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:23 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:23 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:23 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:23 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:23 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:23 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:23 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:23 +08:00: Process GET /comment...
2017-08-23 11:23 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:23 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:23 +08:00: Process GET /static/css/default.css...
2017-08-23 11:23 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:23 +08:00: Process GET /static/css/base.css...
2017-08-23 11:23 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:23 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:23 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:23 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:23 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:23 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:23 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:23 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:23 +08:00: Process GET /comment...
2017-08-23 11:23 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:23 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:23 +08:00: Process GET /static/css/default.css...
2017-08-23 11:23 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:23 +08:00: Process GET /static/css/base.css...
2017-08-23 11:23 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:23 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:23 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:23 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:23 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:23 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:23 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:24 +08:00: Process GET /comment...
2017-08-23 11:24 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:24 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:24 +08:00: Process GET /static/css/default.css...
2017-08-23 11:24 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:24 +08:00: Process GET /static/css/base.css...
2017-08-23 11:24 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:24 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:24 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:24 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:24 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:24 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:24 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:24 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:24 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:24 +08:00: Process GET /comment...
2017-08-23 11:24 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:24 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 11:24 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:24 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 11:24 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:24 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:24 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:24 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:24 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:24 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:24 +08:00: Process GET /comment...
2017-08-23 11:24 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 11:24 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:24 +08:00: Process GET /static/css/base.css...
2017-08-23 11:24 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:24 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:24 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:24 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:24 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:24 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:26 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:26 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:26 +08:00: Process GET /static/css/default.css...
2017-08-23 11:26 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:26 +08:00: Process GET /static/css/base.css...
2017-08-23 11:26 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:26 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:28 +08:00: process controller: article.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /article
2017-08-23 11:28 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /comment
2017-08-23 11:28 +08:00: process controller: index.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /
2017-08-23 11:28 +08:00: process controller: me.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /me
2017-08-23 11:28 +08:00: process controller: postedit.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /postedit
2017-08-23 11:28 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 11:28 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 11:28 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:28 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:28 +08:00: Process GET /comment...
2017-08-23 11:28 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:28 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:28 +08:00: Process GET /static/css/default.css...
2017-08-23 11:28 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:28 +08:00: Process GET /static/css/base.css...
2017-08-23 11:28 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:28 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:28 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:28 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:28 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:28 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:28 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:28 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:28 +08:00: process controller: article.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /article
2017-08-23 11:28 +08:00: register URL mapping: POST /article
2017-08-23 11:28 +08:00: process controller: comment.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /comment
2017-08-23 11:28 +08:00: process controller: index.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /
2017-08-23 11:28 +08:00: process controller: me.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /me
2017-08-23 11:28 +08:00: process controller: postedit.js...
2017-08-23 11:28 +08:00: register URL mapping: GET /postedit
2017-08-23 11:28 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:28 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:28 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:28 +08:00: Process GET /comment...
2017-08-23 11:28 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:28 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:28 +08:00: Process GET /static/css/default.css...
2017-08-23 11:28 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:28 +08:00: Process GET /static/css/base.css...
2017-08-23 11:28 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:28 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:28 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:28 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:28 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 11:28 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:28 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:28 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:29 +08:00: Process GET /comment...
2017-08-23 11:29 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:29 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:29 +08:00: Process GET /static/css/default.css...
2017-08-23 11:29 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:29 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 11:29 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:29 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:29 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:29 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:29 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:29 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:29 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:29 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:29 +08:00: Process GET /comment...
2017-08-23 11:29 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:29 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:29 +08:00: Process GET /static/css/default.css...
2017-08-23 11:29 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:29 +08:00: Process GET /static/css/base.css...
2017-08-23 11:29 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:29 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:29 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:29 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 11:29 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:29 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:29 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:29 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:30 +08:00: process controller: article.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /article
2017-08-23 11:30 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /comment
2017-08-23 11:30 +08:00: process controller: index.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /
2017-08-23 11:30 +08:00: process controller: me.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /me
2017-08-23 11:30 +08:00: process controller: postedit.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /postedit
2017-08-23 11:30 +08:00: register URL mapping: POST /postedit
2017-08-23 11:30 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:30 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:30 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:30 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:30 +08:00: process controller: article.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /article
2017-08-23 11:30 +08:00: register URL mapping: POST /article
2017-08-23 11:30 +08:00: process controller: comment.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /comment
2017-08-23 11:30 +08:00: process controller: index.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /
2017-08-23 11:30 +08:00: process controller: me.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /me
2017-08-23 11:30 +08:00: process controller: postedit.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /postedit
2017-08-23 11:30 +08:00: register URL mapping: POST /postedit
2017-08-23 11:30 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:30 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:30 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:30 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:30 +08:00: Process GET /comment...
2017-08-23 11:30 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 11:30 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 11:30 +08:00: Process GET /static/css/default.css...
2017-08-23 11:30 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 11:30 +08:00: Process GET /static/css/base.css...
2017-08-23 11:30 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 11:30 +08:00: Process GET /static/css/comment.css...
2017-08-23 11:30 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 11:30 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 11:30 +08:00: Process GET /static/js/marked.js...
2017-08-23 11:30 +08:00: Process GET /static/js/highlight.js...
2017-08-23 11:30 +08:00: Process GET /static/images/plus.png...
2017-08-23 11:30 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 11:30 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 11:30 +08:00: process controller: article.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /article
2017-08-23 11:30 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /comment
2017-08-23 11:30 +08:00: process controller: index.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /
2017-08-23 11:30 +08:00: process controller: me.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /me
2017-08-23 11:30 +08:00: process controller: postedit.js...
2017-08-23 11:30 +08:00: register URL mapping: GET /postedit
2017-08-23 11:30 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 11:30 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 11:30 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:30 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:39 +08:00: process controller: article.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /article
2017-08-23 11:39 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /comment
2017-08-23 11:39 +08:00: process controller: index.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /
2017-08-23 11:39 +08:00: process controller: me.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /me
2017-08-23 11:39 +08:00: process controller: postedit.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /postedit
2017-08-23 11:39 +08:00: register URL mapping: POST /postedit
2017-08-23 11:39 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:39 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 11:39 +08:00: register URL mapping: POST /postDraft
2017-08-23 11:39 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 11:39 +08:00: process controller: article.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /article
2017-08-23 11:39 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /comment
2017-08-23 11:39 +08:00: process controller: index.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /
2017-08-23 11:39 +08:00: process controller: me.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /me
2017-08-23 11:39 +08:00: process controller: postedit.js...
2017-08-23 11:39 +08:00: register URL mapping: GET /postedit
2017-08-23 11:39 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 11:39 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 11:39 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:15 +08:00: Process GET /comment...
2017-08-23 13:15 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
2017-08-23 13:15 +08:00: Process GET /static/css/default.css...
2017-08-23 13:15 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:15 +08:00: Process GET /static/css/base.css...
2017-08-23 13:15 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:15 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:15 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:15 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:15 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:15 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:15 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:15 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:15 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:15 +08:00: process controller: article.js...
2017-08-23 13:15 +08:00: register URL mapping: GET /article
2017-08-23 13:15 +08:00: register URL mapping: POST /article
2017-08-23 13:15 +08:00: process controller: comment.js...
2017-08-23 13:15 +08:00: register URL mapping: GET /comment
2017-08-23 13:15 +08:00: process controller: index.js...
2017-08-23 13:15 +08:00: register URL mapping: GET /
process controller: me.js...
2017-08-23 13:15 +08:00: register URL mapping: GET /me
2017-08-23 13:15 +08:00: process controller: postedit.js...
2017-08-23 13:15 +08:00: register URL mapping: GET /postedit
2017-08-23 13:15 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 13:15 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 13:15 +08:00: register URL mapping: POST /saveArticle
2017-08-23 13:15 +08:00: register URL mapping: POST /postDraft
2017-08-23 13:15 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:15 +08:00: Process GET /comment...
2017-08-23 13:15 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 13:15 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:15 +08:00: Process GET /static/css/base.css...
2017-08-23 13:15 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:15 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:15 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:15 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:15 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:15 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:15 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:15 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:15 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:16 +08:00: Process GET /comment...
2017-08-23 13:16 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:16 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:16 +08:00: Process GET /static/css/default.css...
2017-08-23 13:16 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:16 +08:00: Process GET /static/css/base.css...
2017-08-23 13:16 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:16 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:16 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:16 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:16 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:16 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:16 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:16 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:17 +08:00: process controller: article.js...
2017-08-23 13:17 +08:00: register URL mapping: GET /article
2017-08-23 13:17 +08:00: register URL mapping: POST /article
2017-08-23 13:17 +08:00: process controller: comment.js...
2017-08-23 13:17 +08:00: register URL mapping: GET /comment
2017-08-23 13:17 +08:00: process controller: index.js...
2017-08-23 13:17 +08:00: register URL mapping: GET /
2017-08-23 13:17 +08:00: process controller: me.js...
2017-08-23 13:17 +08:00: register URL mapping: GET /me
2017-08-23 13:17 +08:00: process controller: postedit.js...
2017-08-23 13:17 +08:00: register URL mapping: GET /postedit
2017-08-23 13:17 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 13:17 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 13:17 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 13:17 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:17 +08:00: Process GET /comment...
2017-08-23 13:17 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:17 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:17 +08:00: Process GET /static/css/default.css...
2017-08-23 13:17 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:17 +08:00: Process GET /static/css/base.css...
2017-08-23 13:17 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:17 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:17 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:17 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:17 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:18 +08:00: process controller: article.js...
2017-08-23 13:18 +08:00: register URL mapping: GET /article
2017-08-23 13:18 +08:00: register URL mapping: POST /article
2017-08-23 13:18 +08:00: process controller: comment.js...
2017-08-23 13:18 +08:00: register URL mapping: GET /comment
2017-08-23 13:18 +08:00: process controller: index.js...
2017-08-23 13:18 +08:00: register URL mapping: GET /
2017-08-23 13:18 +08:00: process controller: me.js...
2017-08-23 13:18 +08:00: register URL mapping: GET /me
2017-08-23 13:18 +08:00: process controller: postedit.js...
2017-08-23 13:18 +08:00: register URL mapping: GET /postedit
2017-08-23 13:18 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 13:18 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 13:18 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 13:18 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:18 +08:00: Process GET /comment...
2017-08-23 13:18 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:18 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:18 +08:00: Process GET /static/css/default.css...
2017-08-23 13:18 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:18 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 13:18 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:18 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:18 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:18 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:18 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:18 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:18 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:18 +08:00: Process GET /comment...
2017-08-23 13:18 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:18 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:18 +08:00: Process GET /static/css/default.css...
2017-08-23 13:18 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:18 +08:00: Process GET /static/css/base.css...
2017-08-23 13:18 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:18 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:18 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:18 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:18 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:18 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:18 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:18 +08:00: Process GET /comment...
2017-08-23 13:18 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:18 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:18 +08:00: Process GET /static/css/default.css...
2017-08-23 13:18 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:18 +08:00: Process GET /static/css/base.css...
2017-08-23 13:18 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:18 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/css/comment.css...
2017-08-23 13:18 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:18 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:18 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:18 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:18 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:18 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:19 +08:00: process controller: article.js...
2017-08-23 13:19 +08:00: register URL mapping: GET /article
2017-08-23 13:19 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:19 +08:00: register URL mapping: GET /comment
2017-08-23 13:19 +08:00: process controller: index.js...
2017-08-23 13:19 +08:00: register URL mapping: GET /
2017-08-23 13:19 +08:00: process controller: me.js...
2017-08-23 13:19 +08:00: register URL mapping: GET /me
2017-08-23 13:19 +08:00: process controller: postedit.js...
2017-08-23 13:19 +08:00: register URL mapping: GET /postedit
2017-08-23 13:19 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 13:19 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 13:19 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 13:19 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:19 +08:00: Process GET /comment...
2017-08-23 13:19 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:19 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:19 +08:00: Process GET /static/css/default.css...
2017-08-23 13:19 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:19 +08:00: Process GET /static/css/base.css...
2017-08-23 13:19 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:19 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:19 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:19 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:19 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:19 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:19 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:19 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:19 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:20 +08:00: process controller: article.js...
2017-08-23 13:20 +08:00: register URL mapping: GET /article
2017-08-23 13:20 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:20 +08:00: register URL mapping: GET /comment
2017-08-23 13:20 +08:00: process controller: index.js...
2017-08-23 13:20 +08:00: register URL mapping: GET /
2017-08-23 13:20 +08:00: process controller: me.js...
2017-08-23 13:20 +08:00: register URL mapping: GET /me
2017-08-23 13:20 +08:00: process controller: postedit.js...
2017-08-23 13:20 +08:00: register URL mapping: GET /postedit
2017-08-23 13:20 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 13:20 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 13:20 +08:00: register URL mapping: POST /postDraft
2017-08-23 13:20 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:20 +08:00: Process GET /comment...
2017-08-23 13:20 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:20 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:20 +08:00: Process GET /static/css/default.css...
2017-08-23 13:20 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:20 +08:00: Process GET /static/css/base.css...
2017-08-23 13:20 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:20 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:20 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:20 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:20 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:20 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:20 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:20 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:23 +08:00: process controller: article.js...
2017-08-23 13:23 +08:00: register URL mapping: GET /article
2017-08-23 13:23 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:23 +08:00: register URL mapping: GET /comment
2017-08-23 13:23 +08:00: process controller: index.js...
2017-08-23 13:23 +08:00: register URL mapping: GET /
2017-08-23 13:23 +08:00: process controller: me.js...
2017-08-23 13:23 +08:00: register URL mapping: GET /me
2017-08-23 13:23 +08:00: process controller: postedit.js...
2017-08-23 13:23 +08:00: register URL mapping: GET /postedit
2017-08-23 13:23 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 13:23 +08:00: register URL mapping: POST /saveDraft
2017-08-23 13:23 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 13:23 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:24 +08:00: Process GET /comment...
2017-08-23 13:24 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:24 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:24 +08:00: Process GET /static/css/default.css...
2017-08-23 13:24 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:24 +08:00: Process GET /static/css/base.css...
2017-08-23 13:24 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:24 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:24 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:24 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:24 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:24 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:24 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:24 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:24 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:24 +08:00: process controller: article.js...
2017-08-23 13:24 +08:00: register URL mapping: GET /article
2017-08-23 13:24 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:24 +08:00: register URL mapping: GET /comment
2017-08-23 13:24 +08:00: process controller: index.js...
2017-08-23 13:24 +08:00: register URL mapping: GET /
2017-08-23 13:24 +08:00: process controller: me.js...
2017-08-23 13:24 +08:00: register URL mapping: GET /me
2017-08-23 13:24 +08:00: process controller: postedit.js...
2017-08-23 13:24 +08:00: register URL mapping: GET /postedit
2017-08-23 13:24 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 13:24 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 13:24 +08:00: register URL mapping: POST /postDraft
2017-08-23 13:24 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:25 +08:00: process controller: article.js...
2017-08-23 13:25 +08:00: register URL mapping: GET /article
2017-08-23 13:25 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:25 +08:00: register URL mapping: GET /comment
2017-08-23 13:25 +08:00: process controller: index.js...
2017-08-23 13:25 +08:00: register URL mapping: GET /
2017-08-23 13:25 +08:00: process controller: me.js...
2017-08-23 13:25 +08:00: register URL mapping: GET /me
2017-08-23 13:25 +08:00: process controller: postedit.js...
2017-08-23 13:25 +08:00: register URL mapping: GET /postedit
2017-08-23 13:25 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 13:25 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 13:25 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:27 +08:00: process controller: article.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /article
2017-08-23 13:27 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /comment
2017-08-23 13:27 +08:00: process controller: index.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /
2017-08-23 13:27 +08:00: process controller: me.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /me
2017-08-23 13:27 +08:00: process controller: postedit.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /postedit
2017-08-23 13:27 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 13:27 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 13:27 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:27 +08:00: Process GET /comment...
2017-08-23 13:27 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:27 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:27 +08:00: Process GET /static/css/default.css...
2017-08-23 13:27 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:27 +08:00: Process GET /static/css/base.css...
2017-08-23 13:27 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:27 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:27 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:27 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:27 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:27 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:27 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:27 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:27 +08:00: process controller: article.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /article
2017-08-23 13:27 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /comment
2017-08-23 13:27 +08:00: process controller: index.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /
2017-08-23 13:27 +08:00: process controller: me.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /me
2017-08-23 13:27 +08:00: process controller: postedit.js...
2017-08-23 13:27 +08:00: register URL mapping: GET /postedit
2017-08-23 13:27 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-23 13:27 +08:00: register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
2017-08-23 13:27 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 13:27 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:27 +08:00: Process GET /comment...
2017-08-23 13:27 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:27 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:27 +08:00: Process GET /static/css/default.css...
2017-08-23 13:27 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:27 +08:00: Process GET /static/css/base.css...
2017-08-23 13:27 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:27 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:27 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:27 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:27 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:27 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:27 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:27 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:27 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:28 +08:00: process controller: article.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /article
2017-08-23 13:28 +08:00: register URL mapping: POST /article
2017-08-23 13:28 +08:00: process controller: comment.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /comment
2017-08-23 13:28 +08:00: process controller: index.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /
2017-08-23 13:28 +08:00: process controller: me.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /me
2017-08-23 13:28 +08:00: process controller: postedit.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /postedit
2017-08-23 13:28 +08:00: register URL mapping: POST /postedit
2017-08-23 13:28 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 13:28 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 13:28 +08:00: register URL mapping: POST /postDraft
2017-08-23 13:28 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:28 +08:00: Process GET /comment...
2017-08-23 13:28 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 13:28 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:28 +08:00: Process GET /static/css/base.css...
2017-08-23 13:28 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:28 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
2017-08-23 13:28 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-23 13:28 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:28 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:28 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:28 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:28 +08:00: process controller: article.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /article
2017-08-23 13:28 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /comment
2017-08-23 13:28 +08:00: process controller: index.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /
2017-08-23 13:28 +08:00: process controller: me.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /me
2017-08-23 13:28 +08:00: process controller: postedit.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /postedit
2017-08-23 13:28 +08:00: register URL mapping: POST /postedit
2017-08-23 13:28 +08:00: register URL mapping: POST /uploadImage
2017-08-23 13:28 +08:00: register URL mapping: POST /saveDraft
2017-08-23 13:28 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 13:28 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:28 +08:00: Process GET /comment...
2017-08-23 13:28 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:28 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:28 +08:00: Process GET /static/css/default.css...
2017-08-23 13:28 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:28 +08:00: Process GET /static/css/base.css...
2017-08-23 13:28 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:28 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:28 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:28 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:28 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:28 +08:00: process controller: article.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /article
2017-08-23 13:28 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /comment
2017-08-23 13:28 +08:00: process controller: index.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /
2017-08-23 13:28 +08:00: process controller: me.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /me
2017-08-23 13:28 +08:00: process controller: postedit.js...
2017-08-23 13:28 +08:00: register URL mapping: GET /postedit
2017-08-23 13:28 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 13:28 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 13:28 +08:00: register URL mapping: POST /postDraft
2017-08-23 13:28 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:28 +08:00: Process GET /comment...
2017-08-23 13:28 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:28 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:28 +08:00: Process GET /static/css/default.css...
2017-08-23 13:28 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:28 +08:00: Process GET /static/css/base.css...
2017-08-23 13:28 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:28 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:28 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:28 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:28 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:28 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:28 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:28 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:28 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:28 +08:00: Process POST /comment...
2017-08-23 13:28 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:33 +08:00: Process GET /comment...
2017-08-23 13:33 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:33 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:33 +08:00: Process GET /static/css/default.css...
2017-08-23 13:33 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:33 +08:00: Process GET /static/css/base.css...
2017-08-23 13:33 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:33 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:33 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:33 +08:00: Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:33 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:33 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:33 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:33 +08:00: Process GET /comment...
2017-08-23 13:33 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:33 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:33 +08:00: Process GET /static/css/default.css...
2017-08-23 13:33 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:33 +08:00: Process GET /static/css/base.css...
2017-08-23 13:33 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:33 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:33 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:33 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:33 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:33 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:33 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:33 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:34 +08:00: Process GET /comment...
Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/css/comment.css...
Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
Process GET /static/images/plus.png...
2017-08-23 13:34 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:34 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:34 +08:00: Process GET /comment...
2017-08-23 13:34 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:34 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:34 +08:00: Process GET /static/css/default.css...
2017-08-23 13:34 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:34 +08:00: Process GET /static/css/base.css...
2017-08-23 13:34 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:34 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:34 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:34 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:34 +08:00: Process GET /static/js/marked.js...
2017-08-23 13:34 +08:00: Process GET /static/js/highlight.js...
2017-08-23 13:34 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:34 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:34 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:34 +08:00: Process GET /comment...
2017-08-23 13:34 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:34 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 13:34 +08:00: Process GET /static/css/default.css...
2017-08-23 13:34 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:34 +08:00: Process GET /static/css/base.css...
2017-08-23 13:34 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 13:34 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
2017-08-23 13:34 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:34 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:34 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:34 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:34 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:36 +08:00: Process GET /comment...
2017-08-23 13:36 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 13:36 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/default.css...
2017-08-23 13:36 +08:00: Process GET /static/css/uikit.min.css...
2017-08-23 13:36 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 13:36 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 13:36 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:36 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:36 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:36 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:36 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:36 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:36 +08:00: Process POST /comment...
2017-08-23 13:36 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:37 +08:00: process controller: article.js...
2017-08-23 13:37 +08:00: register URL mapping: GET /article
2017-08-23 13:37 +08:00: register URL mapping: POST /article
2017-08-23 13:37 +08:00: process controller: comment.js...
2017-08-23 13:37 +08:00: register URL mapping: GET /comment
2017-08-23 13:37 +08:00: register URL mapping: POST /comment
process controller: index.js...
2017-08-23 13:37 +08:00: register URL mapping: GET /
2017-08-23 13:37 +08:00: process controller: me.js...
2017-08-23 13:37 +08:00: register URL mapping: GET /me
2017-08-23 13:37 +08:00: process controller: postedit.js...
2017-08-23 13:37 +08:00: register URL mapping: GET /postedit
2017-08-23 13:37 +08:00: register URL mapping: POST /postedit
2017-08-23 13:37 +08:00: register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 13:37 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-23 13:37 +08:00: register URL mapping: POST /postDraft
2017-08-23 13:37 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 13:37 +08:00: Process GET /comment...
2017-08-23 13:37 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/bootstrap.css...
2017-08-23 13:37 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 13:37 +08:00: Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-23 13:37 +08:00: Process GET /static/css/comment.css...
2017-08-23 13:37 +08:00: Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 13:37 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 13:37 +08:00: Process GET /static/images/plus.png...
2017-08-23 13:37 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 13:37 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 13:37 +08:00: Process POST /comment...
2017-08-23 13:37 +08:00: { name: '', email: '', comment: '', url: '' }
2017-08-23 13:37 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-23 16:09 +08:00: process controller: article.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /article
2017-08-23 16:09 +08:00: register URL mapping: POST /article
2017-08-23 16:09 +08:00: process controller: comment.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /comment
2017-08-23 16:09 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /
2017-08-23 16:09 +08:00: process controller: me.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /me
2017-08-23 16:09 +08:00: process controller: postedit.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /postedit
2017-08-23 16:09 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 16:09 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 16:09 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 16:09 +08:00: process controller: article.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /article
2017-08-23 16:09 +08:00: register URL mapping: POST /article
2017-08-23 16:09 +08:00: process controller: comment.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /comment
2017-08-23 16:09 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /
2017-08-23 16:09 +08:00: process controller: me.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /me
2017-08-23 16:09 +08:00: process controller: postedit.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /postedit
2017-08-23 16:09 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 16:09 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 16:09 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 16:09 +08:00: process controller: article.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /article
2017-08-23 16:09 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /comment
2017-08-23 16:09 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /
2017-08-23 16:09 +08:00: process controller: me.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /me
process controller: postedit.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /postedit
2017-08-23 16:09 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 16:09 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 16:09 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 16:09 +08:00: process controller: article.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /article
2017-08-23 16:09 +08:00: register URL mapping: POST /article
2017-08-23 16:09 +08:00: process controller: comment.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /comment
2017-08-23 16:09 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /
2017-08-23 16:09 +08:00: process controller: me.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /me
2017-08-23 16:09 +08:00: process controller: postedit.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /postedit
2017-08-23 16:09 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 16:09 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /saveArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /postDraft
2017-08-23 16:09 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 16:09 +08:00: process controller: article.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /article
2017-08-23 16:09 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /comment
2017-08-23 16:09 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /
2017-08-23 16:09 +08:00: process controller: me.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /me
2017-08-23 16:09 +08:00: process controller: postedit.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /postedit
2017-08-23 16:09 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 16:09 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 16:09 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 16:09 +08:00: process controller: article.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /article
2017-08-23 16:09 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /comment
2017-08-23 16:09 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /
2017-08-23 16:09 +08:00: process controller: me.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /me
2017-08-23 16:09 +08:00: process controller: postedit.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /postedit
2017-08-23 16:09 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 16:09 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 16:09 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 16:09 +08:00: process controller: article.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /article
2017-08-23 16:09 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /comment
2017-08-23 16:09 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /
2017-08-23 16:09 +08:00: process controller: me.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /me
2017-08-23 16:09 +08:00: process controller: postedit.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /postedit
2017-08-23 16:09 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 16:09 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /saveArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /postDraft
2017-08-23 16:09 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 16:09 +08:00: process controller: article.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /article
2017-08-23 16:09 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /comment
2017-08-23 16:09 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /
2017-08-23 16:09 +08:00: process controller: me.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /me
2017-08-23 16:09 +08:00: process controller: postedit.js...
2017-08-23 16:09 +08:00: register URL mapping: GET /postedit
2017-08-23 16:09 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-23 16:09 +08:00: register URL mapping: POST /deleteArticle
2017-08-23 16:09 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-23 16:09 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-23 16:09 +08:00: Process GET /comment...
2017-08-23 16:09 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-23 16:09 +08:00: Process GET /static/css/bootstrap.css...
2017-08-23 16:09 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
2017-08-23 16:09 +08:00: Process GET /static/css/base.css...
2017-08-23 16:09 +08:00: Process GET /static/js/bootstrap.js...
2017-08-23 16:09 +08:00: Process GET /static/css/comment.css...
2017-08-23 16:09 +08:00: Process GET /static/js/uikit.min.js...
2017-08-23 16:09 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-23 16:09 +08:00: Process GET /static/js/marked.js...
Process GET /static/js/highlight.js...
2017-08-23 16:09 +08:00: Process GET /static/images/plus.png...
2017-08-23 16:09 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-23 16:09 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:12 +08:00: process controller: article.js...
2017-08-24 09:12 +08:00: register URL mapping: GET /article
2017-08-24 09:12 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:12 +08:00: register URL mapping: GET /comment
2017-08-24 09:12 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:12 +08:00: register URL mapping: GET /
process controller: me.js...
2017-08-24 09:12 +08:00: register URL mapping: GET /me
2017-08-24 09:12 +08:00: process controller: postedit.js...
2017-08-24 09:12 +08:00: register URL mapping: GET /postedit
2017-08-24 09:12 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-24 09:12 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:12 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:12 +08:00: Process GET /comment...
2017-08-24 09:12 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:12 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:12 +08:00: Process GET /static/css/default.css...
2017-08-24 09:12 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
Process GET /static/js/bootstrap.js...
2017-08-24 09:12 +08:00: Process GET /static/css/comment.css...
Process GET /static/js/uikit.min.js...
Process GET /static/js/jquery.dotdotdot.js...
Process GET /static/js/marked.js...
2017-08-24 09:12 +08:00: Process GET /static/js/highlight.js...
2017-08-24 09:12 +08:00: Process GET /static/images/plus.png...
2017-08-24 09:12 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:12 +08:00: Process GET /favicon.ico...
2017-08-24 09:12 +08:00: Process GET /...
2017-08-24 09:12 +08:00: { title: 'HTT\'s blog',
  contents: 
   [ { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-22 14:31:29',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' } ],
  count: 9,
  page: 1,
  limit: 5,
  pages: 2 }
2017-08-24 09:12 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:12 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:12 +08:00: Process GET /static/css/default.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/base.css...
2017-08-24 09:12 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:12 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:12 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-24 09:12 +08:00: Process GET /static/js/marked.js...
2017-08-24 09:12 +08:00: Process GET /static/js/highlight.js...
2017-08-24 09:12 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:13 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:13 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:13 +08:00: Process GET /static/css/default.css...
2017-08-24 09:13 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:13 +08:00: Process GET /static/css/base.css...
2017-08-24 09:13 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:19 +08:00: Process GET /postedit...
2017-08-24 09:19 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:19 +08:00: id: 
2017-08-24 09:19 +08:00: [ { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-22 14:31:29',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:19 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-22 14:31:29',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: null }
2017-08-24 09:19 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:19 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:19 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:19 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:19 +08:00: Process GET /static/css/postlist.css...
Process GET /static/js/fileinput.js...
2017-08-24 09:19 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:19 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:19 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:19 +08:00: Process GET /static/css/add.css...
2017-08-24 09:19 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:19 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:19 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:19 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:19 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:19 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:19 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:19 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:19 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:19 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:19 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:21 +08:00: process controller: article.js...
2017-08-24 09:21 +08:00: register URL mapping: GET /article
2017-08-24 09:21 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:21 +08:00: register URL mapping: GET /comment
2017-08-24 09:21 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:21 +08:00: register URL mapping: GET /
2017-08-24 09:21 +08:00: process controller: me.js...
2017-08-24 09:21 +08:00: register URL mapping: GET /me
2017-08-24 09:21 +08:00: process controller: postedit.js...
2017-08-24 09:21 +08:00: register URL mapping: GET /postedit
2017-08-24 09:21 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-24 09:21 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:21 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:23 +08:00: Process GET /postedit...
2017-08-24 09:23 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:23 +08:00: id: 
2017-08-24 09:23 +08:00: [ { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-22 14:31:29',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:23 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-22 14:31:29',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: null }
2017-08-24 09:23 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:23 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:23 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:23 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:23 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:23 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:23 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:23 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:23 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:23 +08:00: Process GET /static/css/add.css...
Process GET /static/js/zh.js...
2017-08-24 09:23 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:23 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:23 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:23 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:23 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:23 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:23 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:23 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:23 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:23 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:25 +08:00: process controller: article.js...
2017-08-24 09:25 +08:00: register URL mapping: GET /article
2017-08-24 09:25 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:25 +08:00: register URL mapping: GET /comment
2017-08-24 09:25 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:25 +08:00: register URL mapping: GET /
2017-08-24 09:25 +08:00: process controller: me.js...
2017-08-24 09:25 +08:00: register URL mapping: GET /me
2017-08-24 09:25 +08:00: process controller: postedit.js...
2017-08-24 09:25 +08:00: register URL mapping: GET /postedit
2017-08-24 09:25 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-24 09:25 +08:00: register URL mapping: POST /saveDraft
2017-08-24 09:25 +08:00: register URL mapping: POST /deleteArticle
2017-08-24 09:25 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:25 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:25 +08:00: Process GET /postedit...
2017-08-24 09:25 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:25 +08:00: id: 
2017-08-24 09:25 +08:00: [ { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-22 14:31:29',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:25 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-22 14:31:29',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: null }
2017-08-24 09:25 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:25 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:25 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:25 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:25 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:25 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:25 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:25 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:25 +08:00: Process GET /static/css/sweetalert.css...
Process GET /static/css/add.css...
Process GET /static/js/zh.js...
2017-08-24 09:25 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:25 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:25 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:25 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:25 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:25 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:25 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:25 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:25 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:25 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:26 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:26 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:26 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:26 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-22 14:31:29',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:26 +08:00: [ { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-22 14:31:29',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:26 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-22 14:31:29',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-22 14:31:29',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:26 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:26 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:26 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:26 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:26 +08:00: Process GET /static/css/custom_up_img.css...
Process GET /static/css/sweetalert.css...
2017-08-24 09:26 +08:00: Process GET /static/css/add.css...
2017-08-24 09:26 +08:00: Process GET /static/js/fileinput.js...
Process GET /static/js/zh.js...
2017-08-24 09:26 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:26 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:26 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:26 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:26 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:26 +08:00: Process POST /saveArticle...
2017-08-24 09:26 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-22 14:31:29',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:26 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:26 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:26 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:26 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:26 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:26 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:26 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:26 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:26 +08:00: Process GET /static/css/uikit.min.css...
Process GET /static/css/postlist.css...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:26 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:26 +08:00: Process GET /static/css/sweetalert.css...
Process GET /static/css/add.css...
2017-08-24 09:26 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:26 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:26 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:26 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:26 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:26 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:26 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:26 +08:00: process controller: article.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /article
2017-08-24 09:26 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /comment
2017-08-24 09:26 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /
2017-08-24 09:26 +08:00: process controller: me.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /me
2017-08-24 09:26 +08:00: process controller: postedit.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /postedit
2017-08-24 09:26 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-24 09:26 +08:00: register URL mapping: POST /deleteArticle
2017-08-24 09:26 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:26 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:26 +08:00: process controller: article.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /article
2017-08-24 09:26 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /comment
2017-08-24 09:26 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /
2017-08-24 09:26 +08:00: process controller: me.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /me
2017-08-24 09:26 +08:00: process controller: postedit.js...
2017-08-24 09:26 +08:00: register URL mapping: GET /postedit
2017-08-24 09:26 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-24 09:26 +08:00: register URL mapping: POST /deleteArticle
2017-08-24 09:26 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:26 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:26 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:26 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:26 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:26 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:26 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:26 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:26 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:26 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:26 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:26 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:26 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:26 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:26 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:26 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:26 +08:00: Process GET /static/css/add.css...
2017-08-24 09:26 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:26 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:26 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:26 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:26 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:26 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:26 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:27 +08:00: process controller: article.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /article
2017-08-24 09:27 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /comment
2017-08-24 09:27 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /
2017-08-24 09:27 +08:00: process controller: me.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /me
2017-08-24 09:27 +08:00: process controller: postedit.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /postedit
2017-08-24 09:27 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-24 09:27 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
2017-08-24 09:27 +08:00: register URL mapping: POST /postDraft
2017-08-24 09:27 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:27 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:27 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:27 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:27 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:27 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:27 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:27 +08:00: Process GET /static/css/bootstrap.css...
Process GET /static/css/fileinput.css...
2017-08-24 09:27 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:27 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:27 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:27 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:27 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:27 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:27 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:27 +08:00: Process GET /static/css/add.css...
2017-08-24 09:27 +08:00: Process GET /static/js/zh.js...
Process GET /static/js/bootstrap.js...
2017-08-24 09:27 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:27 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:27 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:27 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:27 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:27 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:27 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:27 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:27 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:27 +08:00: process controller: article.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /article
2017-08-24 09:27 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /comment
2017-08-24 09:27 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /
2017-08-24 09:27 +08:00: process controller: me.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /me
2017-08-24 09:27 +08:00: process controller: postedit.js...
2017-08-24 09:27 +08:00: register URL mapping: GET /postedit
2017-08-24 09:27 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
2017-08-24 09:27 +08:00: register URL mapping: POST /saveDraft
2017-08-24 09:27 +08:00: register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:27 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:27 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:27 +08:00: { title: 'My Articles', contents: null, content: null }
id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:27 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:27 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:27 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:27 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:27 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:27 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:27 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:27 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:27 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:27 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:27 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:27 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:27 +08:00: Process GET /static/css/add.css...
2017-08-24 09:27 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:27 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:27 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:27 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:27 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:27 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:27 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:27 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:27 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:27 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:27 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:28 +08:00: process controller: article.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /article
2017-08-24 09:28 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /comment
2017-08-24 09:28 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
2017-08-24 09:28 +08:00: process controller: index.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /
2017-08-24 09:28 +08:00: process controller: me.js...
register URL mapping: GET /me
process controller: postedit.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /postedit
2017-08-24 09:28 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:28 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:28 +08:00: process controller: article.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /article
2017-08-24 09:28 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /comment
2017-08-24 09:28 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /
2017-08-24 09:28 +08:00: process controller: me.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /me
2017-08-24 09:28 +08:00: process controller: postedit.js...
2017-08-24 09:28 +08:00: register URL mapping: GET /postedit
2017-08-24 09:28 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:28 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:28 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:28 +08:00: { title: 'My Articles', contents: null, content: null }
id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:28 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:28 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:28 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:28 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:28 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:28 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:28 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:28 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:28 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:28 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:28 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:28 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:28 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:28 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:28 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:28 +08:00: Process GET /static/css/add.css...
2017-08-24 09:28 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:28 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:28 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:28 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:28 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:28 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:28 +08:00: Process GET /static/css/bootstrap.min.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:29 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:29 +08:00: { title: 'My Articles', contents: null, content: null }
id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:29 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:29 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:29 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:29 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:29 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:29 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:29 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:29 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:29 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:29 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:29 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:29 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:29 +08:00: Process GET /static/css/add.css...
Process GET /static/js/zh.js...
Process GET /static/js/bootstrap.js...
2017-08-24 09:29 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:29 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:29 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:29 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:29 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:29 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:29 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:29 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:29 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:29 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:29 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:29 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:29 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:29 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:29 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:29 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:29 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:29 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/postlist.css...
2017-08-24 09:29 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:29 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:29 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:29 +08:00: Process GET /static/css/add.css...
2017-08-24 09:29 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:29 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:29 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:29 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:29 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:29 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:29 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:29 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:29 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:29 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:29 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:29 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:30 +08:00: process controller: article.js...
2017-08-24 09:30 +08:00: register URL mapping: GET /article
2017-08-24 09:30 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:30 +08:00: register URL mapping: GET /comment
2017-08-24 09:30 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:30 +08:00: register URL mapping: GET /
2017-08-24 09:30 +08:00: process controller: me.js...
2017-08-24 09:30 +08:00: register URL mapping: GET /me
2017-08-24 09:30 +08:00: process controller: postedit.js...
2017-08-24 09:30 +08:00: register URL mapping: GET /postedit
2017-08-24 09:30 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
2017-08-24 09:30 +08:00: register URL mapping: POST /deleteArticle
2017-08-24 09:30 +08:00: register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:30 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:31 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:31 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:31 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:31 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:31 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:31 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:31 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:31 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:31 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:31 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:31 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:31 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:31 +08:00: Process GET /static/css/add.css...
2017-08-24 09:31 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:31 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:31 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:31 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:31 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:31 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:31 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:31 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:31 +08:00: { title: 'My Articles', contents: null, content: null }
id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:31 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:31 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:31 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:31 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:31 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:31 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:31 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:31 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:31 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:31 +08:00: Process GET /static/css/add.css...
2017-08-24 09:31 +08:00: Process GET /static/js/fileinput.js...
Process GET /static/js/zh.js...
Process GET /static/js/bootstrap.js...
2017-08-24 09:31 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:31 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:31 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:31 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:31 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:31 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:31 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:31 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:31 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:31 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:31 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:31 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:31 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:31 +08:00: Process GET /static/css/postlist.css...
Process GET /static/css/bootstrap.min.css...
2017-08-24 09:31 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:31 +08:00: Process GET /static/css/sweetalert.css...
Process GET /static/js/fileinput.js...
2017-08-24 09:31 +08:00: Process GET /static/css/add.css...
2017-08-24 09:31 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:31 +08:00: Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:31 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:31 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:31 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:31 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:31 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:32 +08:00: process controller: article.js...
2017-08-24 09:32 +08:00: register URL mapping: GET /article
2017-08-24 09:32 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:32 +08:00: register URL mapping: GET /comment
2017-08-24 09:32 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:32 +08:00: register URL mapping: GET /
2017-08-24 09:32 +08:00: process controller: me.js...
2017-08-24 09:32 +08:00: register URL mapping: GET /me
2017-08-24 09:32 +08:00: process controller: postedit.js...
2017-08-24 09:32 +08:00: register URL mapping: GET /postedit
2017-08-24 09:32 +08:00: register URL mapping: POST /postedit
register URL mapping: POST /uploadImage
register URL mapping: POST /saveDraft
register URL mapping: POST /deleteArticle
register URL mapping: POST /saveArticle
register URL mapping: POST /postDraft
2017-08-24 09:32 +08:00: connection is successed, and it is running in http://localhost:3000/
2017-08-24 09:32 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:32 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:32 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:32 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:32 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题是不是不',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:26:17',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:32 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题是不是不',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:26:17',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题是不是不',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:26:17',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:32 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:32 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:32 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:32 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:32 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:32 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:32 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:32 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:32 +08:00: Process GET /static/css/add.css...
2017-08-24 09:32 +08:00: Process GET /static/js/fileinput.js...
Process GET /static/js/zh.js...
Process GET /static/js/bootstrap.js...
2017-08-24 09:32 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:32 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:32 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:32 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:32 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:32 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:32 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:32 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:32 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:32 +08:00: Process POST /saveArticle...
2017-08-24 09:32 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题是不是不',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:26:17',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:32 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:32 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:32 +08:00: id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:32 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:32:31',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:32 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:32:31',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:32 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:32:31',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:32:31',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:32 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:32 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:32 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:32 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:32 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:32 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:32 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:32 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:32 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:32 +08:00: Process GET /static/css/add.css...
2017-08-24 09:32 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:32 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:32 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:32 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:32 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:32 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:32 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:32 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:32 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:32 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:32 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:38 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
{ title: 'My Articles', contents: null, content: null }
id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:38 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:32:31',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:38 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:32:31',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:38 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:32:31',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:32:31',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:38 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:38 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:38 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:38 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:38 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:38 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:38 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:38 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:38 +08:00: Process GET /static/css/add.css...
2017-08-24 09:38 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:38 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:38 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:38 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:38 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:38 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:38 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:38 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:38 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:38 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:38 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:38 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:39 +08:00: Process POST /saveArticle...
2017-08-24 09:39 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:32:31',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:39 +08:00: Process GET /postedit?contentid=599bcf945430ac2c8c1acdb1...
2017-08-24 09:39 +08:00: { title: 'My Articles', contents: null, content: null }
id: 599bcf945430ac2c8c1acdb1
2017-08-24 09:39 +08:00: { _id: 599bcf945430ac2c8c1acdb1,
  title: '[php]fopen中文文件名乱码问题',
  isPublic: true,
  date: '2017-8-22 14:30:44',
  lastEditTime: '2017-8-24 09:39:44',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
  description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' }
2017-08-24 09:39 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:39 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcf945430ac2c8c1acdb1,
     title: '[php]fopen中文文件名乱码问题',
     isPublic: true,
     date: '2017-8-22 14:30:44',
     lastEditTime: '2017-8-24 09:39:44',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
     description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' } }
2017-08-24 09:39 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:39 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:39 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:39 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:39 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:39 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:39 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:39 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:39 +08:00: Process GET /static/css/add.css...
Process GET /static/js/fileinput.js...
Process GET /static/js/zh.js...
2017-08-24 09:39 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:39 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:39 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:39 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:39 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:39 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:39 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:39 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:39 +08:00: Process GET /static/css/bootstrap.min.css.map...
Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:39 +08:00: Process GET /postedit?contentid=599bde1881147631cc8c4fde...
2017-08-24 09:39 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:39 +08:00: id: 599bde1881147631cc8c4fde
2017-08-24 09:39 +08:00: { _id: 599bde1881147631cc8c4fde,
  title: 'link',
  date: '2017-8-22 15:32:40',
  isPublic: true,
  lastEditTime: '2017-8-22 15:32:40',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
  description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' }
2017-08-24 09:39 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:39 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bde1881147631cc8c4fde,
     title: 'link',
     date: '2017-8-22 15:32:40',
     isPublic: true,
     lastEditTime: '2017-8-22 15:32:40',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
     description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' } }
2017-08-24 09:39 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:39 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:39 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:39 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:39 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:39 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:39 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:39 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:39 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:39 +08:00: Process GET /static/css/add.css...
Process GET /static/js/zh.js...
2017-08-24 09:39 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:39 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:39 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:39 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:39 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:39 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:39 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:39 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:39 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:39 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:40 +08:00: Process GET /postedit?contentid=599bde1881147631cc8c4fde...
2017-08-24 09:40 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:40 +08:00: id: 599bde1881147631cc8c4fde
2017-08-24 09:40 +08:00: { _id: 599bde1881147631cc8c4fde,
  title: 'link',
  date: '2017-8-22 15:32:40',
  isPublic: true,
  lastEditTime: '2017-8-22 15:32:40',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
  description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' }
2017-08-24 09:40 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:40 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bde1881147631cc8c4fde,
     title: 'link',
     date: '2017-8-22 15:32:40',
     isPublic: true,
     lastEditTime: '2017-8-22 15:32:40',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
     description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' } }
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:40 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:40 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:40 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:40 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:40 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:40 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:40 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:40 +08:00: Process GET /static/css/add.css...
2017-08-24 09:40 +08:00: Process GET /static/js/zh.js...
Process GET /static/js/bootstrap.js...
2017-08-24 09:40 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:40 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:40 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.css.map...
Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:40 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:40 +08:00: Process GET /postedit?contentid=599bde1881147631cc8c4fde...
{ title: 'My Articles', contents: null, content: null }
id: 599bde1881147631cc8c4fde
2017-08-24 09:40 +08:00: { _id: 599bde1881147631cc8c4fde,
  title: 'link',
  date: '2017-8-22 15:32:40',
  isPublic: true,
  lastEditTime: '2017-8-22 15:32:40',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
  description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' }
2017-08-24 09:40 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:40 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bde1881147631cc8c4fde,
     title: 'link',
     date: '2017-8-22 15:32:40',
     isPublic: true,
     lastEditTime: '2017-8-22 15:32:40',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
     description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' } }
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:40 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:40 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:40 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:40 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:40 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:40 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:40 +08:00: Process GET /static/css/add.css...
2017-08-24 09:40 +08:00: Process GET /static/js/fileinput.js...
Process GET /static/js/zh.js...
Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:40 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:40 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:40 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:40 +08:00: Process GET /postedit?contentid=599bde1881147631cc8c4fde...
{ title: 'My Articles', contents: null, content: null }
id: 599bde1881147631cc8c4fde
2017-08-24 09:40 +08:00: { _id: 599bde1881147631cc8c4fde,
  title: 'link',
  date: '2017-8-22 15:32:40',
  isPublic: true,
  lastEditTime: '2017-8-22 15:32:40',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
  description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' }
2017-08-24 09:40 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:40 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bde1881147631cc8c4fde,
     title: 'link',
     date: '2017-8-22 15:32:40',
     isPublic: true,
     lastEditTime: '2017-8-22 15:32:40',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
     description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' } }
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:40 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:40 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:40 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:40 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:40 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:40 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:40 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:40 +08:00: Process GET /static/css/add.css...
2017-08-24 09:40 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:40 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:40 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:40 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:40 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:40 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:40 +08:00: Process GET /postedit?contentid=599bde1881147631cc8c4fde...
{ title: 'My Articles', contents: null, content: null }
id: 599bde1881147631cc8c4fde
2017-08-24 09:40 +08:00: { _id: 599bde1881147631cc8c4fde,
  title: 'link',
  date: '2017-8-22 15:32:40',
  isPublic: true,
  lastEditTime: '2017-8-22 15:32:40',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
  description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' }
2017-08-24 09:40 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:40 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bde1881147631cc8c4fde,
     title: 'link',
     date: '2017-8-22 15:32:40',
     isPublic: true,
     lastEditTime: '2017-8-22 15:32:40',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
     description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' } }
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:40 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:40 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:40 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:40 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:40 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:40 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:40 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:40 +08:00: Process GET /static/css/add.css...
2017-08-24 09:40 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:40 +08:00: Process GET /static/js/bootstrap.js...
Process GET /static/js/uikit.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:40 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:40 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:40 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:40 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:40 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:41 +08:00: Process GET /postedit?contentid=599bcd87ab7a6934fc32d9ab...
2017-08-24 09:41 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:41 +08:00: id: 599bcd87ab7a6934fc32d9ab
2017-08-24 09:41 +08:00: { _id: 599bcd87ab7a6934fc32d9ab,
  title: 'sub？',
  date: '2017-8-22 14:21:59',
  isPublic: true,
  lastEditTime: '2017-8-22 14:21:59',
  __v: 0,
  isDelete: false,
  comments: [],
  content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
  description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' }
2017-08-24 09:41 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:41 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599bcd87ab7a6934fc32d9ab,
     title: 'sub？',
     date: '2017-8-22 14:21:59',
     isPublic: true,
     lastEditTime: '2017-8-22 14:21:59',
     __v: 0,
     isDelete: false,
     comments: [],
     content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
     description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' } }
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:41 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:41 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:41 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:41 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:41 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:41 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:41 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:41 +08:00: Process GET /static/css/add.css...
Process GET /static/js/zh.js...
2017-08-24 09:41 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:41 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:41 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:41 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:41 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:41 +08:00: Process GET /postedit...
2017-08-24 09:41 +08:00: { title: 'My Articles', contents: null, content: null }
2017-08-24 09:41 +08:00: id: 
2017-08-24 09:41 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:41 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: null }
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:41 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:41 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:41 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:41 +08:00: Process GET /static/css/postlist.css...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:41 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:41 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:41 +08:00: Process GET /static/css/add.css...
2017-08-24 09:41 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:41 +08:00: Process GET /static/js/zh.js...
Process GET /static/js/bootstrap.js...
2017-08-24 09:41 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:41 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:41 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:41 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:41 +08:00: Process GET /postedit?contentid=599a7b633f7d051bbc2d4efa...
2017-08-24 09:41 +08:00: { title: 'My Articles', contents: null, content: null }
id: 599a7b633f7d051bbc2d4efa
2017-08-24 09:41 +08:00: { _id: 599a7b633f7d051bbc2d4efa,
  title: 'Biubiu2',
  date: '2017-8-21 14:19:15',
  isPublic: true,
  __v: 0,
  isDelete: false,
  comments: [],
  content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
  description: '' }
2017-08-24 09:41 +08:00: [ { _id: 599bcf945430ac2c8c1acdb1,
    title: '[php]fopen中文文件名乱码问题',
    isPublic: true,
    date: '2017-8-22 14:30:44',
    lastEditTime: '2017-8-24 09:39:44',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
    description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
  { _id: 599bde1881147631cc8c4fde,
    title: 'link',
    date: '2017-8-22 15:32:40',
    isPublic: true,
    lastEditTime: '2017-8-22 15:32:40',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
    description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
  { _id: 599bcd87ab7a6934fc32d9ab,
    title: 'sub？',
    date: '2017-8-22 14:21:59',
    isPublic: true,
    lastEditTime: '2017-8-22 14:21:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
    description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
  { _id: 599aa243f6013338549c8020,
    title: '字符串截取',
    isPublic: true,
    date: '2017-8-21 17:05:07',
    lastEditTime: '2017-8-22 14:21:01',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
    description: '' },
  { _id: 599aa10df6013338549c801f,
    title: '#学志#项目进度01',
    isPublic: true,
    date: '2017-8-21 16:59:57',
    lastEditTime: '2017-8-21 17:16:59',
    __v: 0,
    isDelete: false,
    comments: [],
    content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
    description: '' },
  { _id: 599a7f2715b70e32083c0435,
    title: 'value test2',
    isPublic: true,
    date: '2017-8-21 14:35:19',
    __v: 0,
    lastEditTime: '2017-8-21 15:57:30',
    isDelete: false,
    comments: [],
    content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
    description: '' },
  { _id: 599a7b633f7d051bbc2d4efa,
    title: 'Biubiu2',
    date: '2017-8-21 14:19:15',
    isPublic: true,
    __v: 0,
    isDelete: false,
    comments: [],
    content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
    description: '' } ]
2017-08-24 09:41 +08:00: { title: 'My Articles',
  contents: 
   [ { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' },
     { _id: 599a7f2715b70e32083c0435,
       title: 'value test2',
       isPublic: true,
       date: '2017-8-21 14:35:19',
       __v: 0,
       lastEditTime: '2017-8-21 15:57:30',
       isDelete: false,
       comments: [],
       content: '// index:\n\'use strict\'\nlet Contents = require(\'../models/Contents\');\nlet res = {\n    title: \'Welcome\',\n    contents: null\n}\nmodule.exports = {\n    \'GET /\': async (ctx, next) => {\n        await Contents.find({\n            isDelete: false,\n            isPublic: true\n        }).then(function (cots) {\n            res.contents = cots;\n            console.log(res);\n            ctx.render(\'index.html\',res);\n        });\n    }\n};\n',
       description: '' },
     { _id: 599a7b633f7d051bbc2d4efa,
       title: 'Biubiu2',
       date: '2017-8-21 14:19:15',
       isPublic: true,
       __v: 0,
       isDelete: false,
       comments: [],
       content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
       description: '' } ],
  content: 
   { _id: 599a7b633f7d051bbc2d4efa,
     title: 'Biubiu2',
     date: '2017-8-21 14:19:15',
     isPublic: true,
     __v: 0,
     isDelete: false,
     comments: [],
     content: '1、处理静态文件的middleware\n```\nconst path = require(\'path\');\nconst mime = require(\'mime\');\nconst fs = require(\'mz/fs\');\n// url: 类似 \'/static/\'\n// dir: 类似 __dirname + \'/static\'\nfunction staticFiles(url, dir) {\n    return async (ctx, next) => {\n        let rpath = ctx.request.path;\n        // 判断是否以指定的url开头:\n        if (rpath.startsWith(url)) {\n            // 获取文件完整路径:\n            let fp = path.join(dir, rpath.substring(url.length));\n            // 判断文件是否存在:\n            if (await fs.exists(fp)) {\n                // 查找文件的mime:\n                ctx.response.type = mime.lookup(rpath);\n                // 读取文件内容并赋值给response.body:\n                ctx.response.body = await fs.readFile(fp);\n            } else {\n                // 文件不存在:\n                ctx.response.status = 404;\n            }\n        } else {\n            // 不是指定前缀的URL，继续处理下一个middleware:\n            await next();\n        }\n    };\n}\nmodule.exports = staticFiles;\n```\n`staticFiles`是一个普通函数，它接收两个参数：URL前缀和一个目录，然后返回一个async函数。这个async函数会判断当前的URL是否以指定前缀开头，如果是，就把URL的路径视为文件，并发送文件内容。如果不是，这个async函数就不做任何事情，而是简单地调用await next()让下一个middleware去处理请求。\n调用时：\n```\nlet staticFiles = require(\'./static-files\');\napp.use(staticFiles(\'/static/\', __dirname + \'/static\'));\n```\n其中mime的介绍：\n> MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\n\n`mime.lookup` 获得文件后缀，文件类型。\n\n2、集成Nunjucks\n处理数据模板，编写一个middleware，这个middleware的作用是给ctx对象绑定一个render(view, model)的方法，这样，后面的Controller就可以调用这个方法来渲染模板了。\n```\nconst nunjucks = require(\'nunjucks\');\n\nfunction createEnv(path, opts) {\n    var\n        autoescape = opts.autoescape === undefined ? true : opts.autoescape,\n        noCache = opts.noCache || false,\n        watch = opts.watch || false,\n        throwOnUndefined = opts.throwOnUndefined || false,\n        env = new nunjucks.Environment(\n            new nunjucks.FileSystemLoader(path || \'views\', {\n                noCache: noCache,\n                watch: watch,\n            }), {\n                autoescape: autoescape,\n                throwOnUndefined: throwOnUndefined\n            });\n    if (opts.filters) {\n        for (var f in opts.filters) {\n            env.addFilter(f, opts.filters[f]);\n        }\n    }\n    return env;\n}\n\nfunction templating(path, opts) {\n    // 创建Nunjucks的env对象:\n    var env = createEnv(path, opts);\n    return async (ctx, next) => {\n        // 给ctx绑定render函数:\n        ctx.render = function (view, model) {\n            // 把render后的内容赋值给response.body:\n            ctx.response.body = env.render(view, Object.assign({}, ctx.state || {}, model || {}));\n            // 设置Content-Type:\n            ctx.response.type = \'text/html\';\n        };\n        // 继续处理请求:\n        await next();\n    };\n}\n\nmodule.exports = templating;\n```\n调用时：\n```\nconst isProduction = process.env.NODE_ENV === \'production\';\n\napp.use(templating(\'view\', {\n    noCache: !isProduction,\n    watch: !isProduction\n}));\n```\n定义了一个常量`isProduction`，它判断当前环境是否是`production`环境。如果是，就使用缓存，如果不是，就关闭缓存。在开发环境下，关闭缓存后，我们修改`View`，可以直接刷新浏览器看到效果，否则，每次修改都必须重启Node程序，会极大地降低开发效率。\n\n`Node.js`在全局变量`process`中定义了一个环境变量`env.NODE_ENV`，为什么要使用该环境变量？因为我们在开发的时候，环境变量应该设置为`\'development\'`，而部署到服务器时，环境变量应该设置为`\'production\'`。在编写代码的时候，要根据当前环境作不同的判断。\n\n注意：生产环境上必须配置环境变量`NODE_ENV = \'production\'`，而开发环境不需要配置，实际上`NODE_ENV`可能是undefined，所以判断的时候，不要用`NODE_ENV === \'development`\'。\n还有`ctx.render`内部渲染模板时，Model对象并不是传入的`model`变量，而是：\n```\nObject.assign({}, ctx.state || {}, model || {})\n```\n首先，`model || {}`确保了即使传入undefined，model也会变为默认值{}。`Object.assign()`会把除第一个参数外的其他参数的所有属性复制到第一个参数中。第二个参数是`ctx.state || {}`，这个目的是为了能把一些公共的变量放入ctx.state并传给View。\n\n例如，某个middleware负责检查用户权限，它可以把当前用户放入ctx.state中：\n```\napp.use(async (ctx, next) => {\n    var user = tryGetUserFromCookie(ctx.request);\n    if (user) {\n        ctx.state.user = user;\n        await next();\n    } else {\n        ctx.response.status = 403;\n    }\n});\n```\n这样就没有必要在每个Controller的async函数中都把user变量放入model中。\n\n3、在使用koa渲染页面时出现数据不同步的问题/回调错误问题\n1）回调写法：\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n        });\n        ctx.render(\'index.html\',res);\n}\n```\n错误：数据不同步。\n2）回调写法：（与express相似）\n```\nasync (ctx, next) => {\n        Contents.find().then(function (cots) {\n            res.contents = cots;\n            ctx.render(\'index.html\',res);\n        });\n}\n```\n错误：Error: Can\'t set headers after they are sent.\n\n解决： 在前面添加await。\n> 1、async 表示这是一个async函数，await只能用在这个函数里面。\n> 2、await 表示在这里等待promise返回结果了，再继续执行。\n> 3、await 后面跟着的应该是一个promise对象。\n\nPromise：\n> Promise是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理更强大。\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件 (通常是一个异步操作)的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。\nPromise对象有以下2个特点： \n1.对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending(进行中)、Resolved(已完成)和Rejected(已失败)。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。 \n2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved；从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象田静回调函数，也会立即得到这个结果。这与事件(Event)完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n有了Promise对象，就可以把异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供了统一的接口，使得控制异步操作更加容易。\n\n',
     description: '' } }
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:41 +08:00: Process GET /static/css/fileinput.css...
2017-08-24 09:41 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
Process GET /static/css/uikit.min.css...
Process GET /static/css/postlist.css...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.min.css...
2017-08-24 09:41 +08:00: Process GET /static/css/custom_up_img.css...
2017-08-24 09:41 +08:00: Process GET /static/css/sweetalert.css...
2017-08-24 09:41 +08:00: Process GET /static/css/add.css...
2017-08-24 09:41 +08:00: Process GET /static/js/fileinput.js...
2017-08-24 09:41 +08:00: Process GET /static/js/zh.js...
2017-08-24 09:41 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:41 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/jquery-3.2.1.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/custom_up_img.js...
2017-08-24 09:41 +08:00: Process GET /static/js/cropper.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/sweetalert-dev.js...
2017-08-24 09:41 +08:00: Process GET /static/images/headimg.jpg...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.min.css.map...
2017-08-24 09:41 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:41 +08:00: Process GET /...
2017-08-24 09:41 +08:00: { title: 'HTT\'s blog',
  contents: 
   [ { _id: 599bde1881147631cc8c4fde,
       title: 'link',
       date: '2017-8-22 15:32:40',
       isPublic: true,
       lastEditTime: '2017-8-22 15:32:40',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)',
       description: '[link](http://www.jianshu.com/writer#/notebooks/12658832/notes/15833670)' },
     { _id: 599bcf945430ac2c8c1acdb1,
       title: '[php]fopen中文文件名乱码问题',
       isPublic: true,
       date: '2017-8-22 14:30:44',
       lastEditTime: '2017-8-24 09:39:44',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名是乱码](http://upload-images.jianshu.io/upload_images/6080416-ae87f6522180080e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n解决：\n对文件名进行编码。\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fileName = iconv(\'UTF-8\', \'GBK\', $fileName);\n$fp = fopen($fileName, \'w\');\nfwrite($fp, \'这是中文内容\');\nfclose($fp);\necho $fileName.\'<br>\';\nif(file_exists($fileName)){\n\techo \'hhhhh\';\n}\n?>\n```\n结果：\n![文件名非乱码](http://upload-images.jianshu.io/upload_images/6080416-6063f477eb56502d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n但是看页面输出的文件名：\n![输出的文件名为乱码](http://upload-images.jianshu.io/upload_images/6080416-9b7ca73e3ebb7116.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n> 所以当要在页面上输出文件名又需要保存文件时，可以先保存原先的中文文件名，再通过文件名编码进行创建文件。',
       description: '一般在php中会使用fopen进行生成文件，但是当文件名存在中文时保存文件会出现中文乱码。\n源代码：\n```\n<?php\n$fileName = __DIR__ . \'\\测试.txt\';\n$fp = ' },
     { _id: 599bcd87ab7a6934fc32d9ab,
       title: 'sub？',
       date: '2017-8-22 14:21:59',
       isPublic: true,
       lastEditTime: '2017-8-22 14:21:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，以后也可以做一个个人展示吧，而且玩过koa之后更是觉得爽啊，以前写node的时候一堆回调，即使用了Q、后来用了promise也依然觉得代码很丑。\r\n\r\n7月底就建了的git项目，现在才算差不多完成了，主要从9月6号放假回来之后开始写的，到现在上线，整整17天，博客前端呈现部分没用几天，主要麻烦还是在于博客管理平台上，现在回过头来看，这个博客admin端写起博客来还是比较苏胡的~\r\n\r\n说说技术架构吧\r\n\r\n整体来说分为三个部分，全都是前后端完全分离的\r\n\r\nserver 后台 包含了所有的后台服务，为博客和博客管理提供后台接口\r\nclient 前端 博客的前端呈现，被vue洗脑严重，界面模仿了vue博客，评论系统用的是多说(但是多说很不稳定…而且已经很久无人维护..)\r\nadmin 前端 博客管理平台的前端，功能上类似于带发布博客功能的印象笔记，markdown语法，预览和编写同步进行，带有自动保存功能，书写的文章只有在发布之后才会同步当前内容到博客client页面上，也完全可以当做一个笔记类应用去用（主要是我自己对笔记类应用重度依赖，又不想把博客和笔记分开，😂）。\r\nserver\r\n\r\n基于restful，nodejs的话采用koa(koa 1)，数据库用了mongo。登录这块的话用了jwt.\r\n\r\n其实以前从没用过mongo，但是觉得还是要来玩一玩，毕竟这么火对吧。\r\n既然用了koa，还是说两句，虽然用的是koa1，主要还是觉得koa1比较geek（啥？这也能成为理由？黑人微笑），写起来感觉屌屌的，虽然代码易读性可能没有koa2那么好，但是写的过程中加深了对于generator promise 函数式等等的理解，中间也反复看了koa的源码，也还是学到了一些东西的。\r\n\r\nclient，也就是你看到的这个页面了\r\n\r\n博客呈现页面，基于vue(1.0)，前后端通信用的fetch，评论系统用的是多说，界面模仿了vue博客，大量使用了其样式效果，还有很多要完善的地方。\r\n由于多说是基于dom的插件，而且使用的方式也是老掉牙的方式，连源码也没有，想vue化一下都不行，所以，client端很多的坑基本都在多说上了，所以，也遇到了以前很多没有遇到的情况，比如$nextTick也不能保证dom已经更新之类的，尝试了很多方案，但是结局都不是太好，涉及到多说的有的代码写得不是很合理，所以多说这块以后可能还是会替换掉的。\r\n\r\n技术栈\r\n\r\nVue && vue-router\r\nfetch\r\nstylus\r\nmarked && highlight\r\nadmin，也就是我写博客的页面了\r\n\r\n列表页:\r\n\r\n列表页\r\n\r\n边写边预览，实时保存：\r\n\r\n预览页\r\n\r\n博客管理系统，也是前后端完全分离的。功能上类似于印象笔记，可以实时保存文章，觉得写好了之后可以发布文章，每次发布都会把文章同步更新到博客上，这样在client端就能看到。采用markdown语法，编辑器采用的是SimpleMDE，支持大量快捷键。\r\n\r\n技术栈\r\n\r\nVue && vuex && vue-router\r\nfetch\r\nstylus\r\nSimpleMDE && marked && highlight\r\n还是有很多要改的地方\r\n\r\n这才只是刚刚完成，还要很多要改进的地方\r\n\r\n项目地址在这，欢迎star，提issue，pr。\r\n\r\n个人项目Vue1.xmongokoaJavascript',
       description: '在实习的时候用到了vue全家桶,就一直有个想用来搭一搭博客的打算，用了koa之后就更有点跃跃欲试了，以前也用过hexo写过一段时间，玩过wordpress，但是还是有一颗自搭博客的心，毕竟是学前端的，' },
     { _id: 599aa243f6013338549c8020,
       title: '字符串截取',
       isPublic: true,
       date: '2017-8-21 17:05:07',
       lastEditTime: '2017-8-22 14:21:01',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '使用 substring()或者slice() \n\n函数：split() \n功能：使用一个指定的分隔符把一个字符串分割存储到数组 \n例子： \nstr=”jpg|bmp|gif|ico|png”; \narr=theString.split(”|”); \n//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组 \n\n函数：Join() \n功能：使用您选择的分隔符将一个数组合并为一个字符串 \n例子： \n复制代码 代码如下:\n\nvar delimitedString=myArray.join(delimiter); \nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”); \nvar portableList=myList.join(”|”); \n//结果是jpg|bmp|gif|ico|png \n\n函数：substring() \n功能：字符串截取，比如想从"MinidxSearchEngine”中得到"Minidx”就要用到substring(0,6) \n\n函数：indexOf() \n功能：返回字符串中匹配子串的第一个字符的下标 \n复制代码 代码如下:\n\nvar myString=”JavaScript”; \nvar w=myString.indexOf(”v”);w will be 2 \nvar x=myString.indexOf(”S”);x will be 4 \nvar y=myString.indexOf(”Script”);y will also be 4 \n\nvar z=myString.indexOf(”key”);z will be -1 \n\n续： \n\n1.substring 方法 \n\n定义和用法 \nsubstring 方法用于提取字符串中介于两个指定下标之间的字符。 \n\n语法 \nstringObject.substring(start,stop) \n\n参数 描述 \nstart 必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。 \nstop 可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。 \n\n返回值 \n一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 \n\n说明 \nsubstring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 \n如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 \n如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 \n如果 start 或 end 为负数，那么它将被替换为 0。 \n\n2.substr 方法 \n\n定义和用法 \nsubstr 方法用于返回一个从指定位置开始的指定长度的子字符串。 \n\n语法 \nstringObject.substr(start [, length ]) \n\n参数 描述 \nstart 必需。所需的子字符串的起始位置。字符串中的第一个字符的索引为 0。 \nlength 可选。在返回的子字符串中应包括的字符个数。 \n\n说明 \n如果 length 为 0 或负数，将返回一个空字符串。 \n如果没有指定该参数，则子字符串将延续到stringObject的最后。 ',
       description: '' },
     { _id: 599aa10df6013338549c801f,
       title: '#学志#项目进度01',
       isPublic: true,
       date: '2017-8-21 16:59:57',
       lastEditTime: '2017-8-21 17:16:59',
       __v: 0,
       isDelete: false,
       comments: [],
       content: '## 批改系统\n[2017.06.29]\n学生端：\n两个登录入口：学号->考试，p+学号->练习；\n选择按钮的优化；\n左上角系统名称：考试系统学生端；\n用户名显示为实际用户名，不需要下拉菜单；\n上传时只能上传单个文件，但可以多次提交；\n选择框与提交按钮不要紧贴；\n教师端：\n单登录入口；\n还可上传练习所用乐谱；\n考试管理&练习管理（可做两个标签页进行区分）；\ntextarea内的名单是placehold；\n日期和时间栏有日期选择工具->时间精确到半；\n批改的前提条件是需要提交学生名单；\n名单是根据空格分割；\n提交时候保存文件名然后进行文件下载；\n唯一标志：学期+学校+教师&学期+学校+学生；\n上传文件模块：上传之后退出问题（调用函数）；\n知识点动态全选；\n上传个别模块：输入学生学号，上传文件（文件名：学期+学校+学号）；\n批改模块：\n提示没有学生未提交试卷/老师未上传文件；\n\n[2017.07.12]\n问题：\n1、课程名称为中文时无法识别；\n2、上传文件是总是提醒不是xml格式文件；\n3、上传标准文件；\n4、重新统计；\n5、成绩保存；\n5、成绩查看；--用户名？？\n6、成绩下载；--txt VS xls？？\n7、上传学生文件还是一个问题啊啊啊啊啊啊啊啊！！！！--莫名的就好了。\n数据库查询：\n1、课程与学生关系查询\nselect School_ID,User_Type,User_ID,User_PWD,User_Name,User_ExpTimeStart,User_ExpTimeEnd,User_RegTime from ME_User\nselect School_ID,Teacher_ID,Student_ID,Term,CourseName from ME_STAssociate\n2、上传标准文件所需数据\nselect XMLFileInfo_Times from ME_XMLFileInfo where User_ID=\'t\' and School_ID=\'1002\' and Term=\'2016-2017-2\' order by XMLFileInfo_Times desc limit 1\n3、查询成绩\nselect Student_ID,School_ID,Term,Score from ME_Score\nselect Student_ID,Score from ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID and ME_User.Student_ID = ME.Score.Student_ID where School_ID=\'$School_ID\' and Term=\'$term\'\nselect Student_ID,Score,User_Name from (ME_Score join ME_User on ME_Score.School_ID = ME_User.School_ID) where ME_User.User_ID = ME_Score.Student_ID and ME_Score.School_ID=\'1002\' and ME_Score.Term=\'2016-2017-2\';\n4、获得知识点\nselect ME_MusicKnowledgePoint_ID,ChineseName,TagName from ME_MusicKnowledgePoint',
       description: '' } ],
  count: 9,
  page: 1,
  limit: 5,
  pages: 2 }
2017-08-24 09:41 +08:00: Process GET /static/css/font-awesome/css/font-awesome.css...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.css...
2017-08-24 09:41 +08:00: Process GET /static/css/default.css...
2017-08-24 09:41 +08:00: Process GET /static/css/uikit.min.css...
2017-08-24 09:41 +08:00: Process GET /static/css/base.css...
2017-08-24 09:41 +08:00: Process GET /static/js/bootstrap.js...
2017-08-24 09:41 +08:00: Process GET /static/js/uikit.min.js...
2017-08-24 09:41 +08:00: Process GET /static/js/jquery.dotdotdot.js...
2017-08-24 09:41 +08:00: Process GET /static/js/marked.js...
2017-08-24 09:41 +08:00: Process GET /static/js/highlight.js...
2017-08-24 09:41 +08:00: Process GET /static/css/bootstrap.css.map...
2017-08-24 09:41 +08:00: Process GET /static/fonts/fontawesome-webfont.woff2...
2017-08-24 09:55 +08:00: process controller: article.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /article
2017-08-24 09:55 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /comment
2017-08-24 09:55 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /
2017-08-24 09:55 +08:00: process controller: me.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /me
2017-08-24 09:55 +08:00: process controller: postedit.js...
2017-08-24 09:55 +08:00: process controller: article.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /article
2017-08-24 09:55 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /comment
2017-08-24 09:55 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /
2017-08-24 09:55 +08:00: process controller: me.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /me
2017-08-24 09:55 +08:00: process controller: postedit.js...
2017-08-24 09:55 +08:00: process controller: article.js...
2017-08-24 09:55 +08:00: register URL mapping: GET /article
2017-08-24 09:55 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
2017-08-24 09:56 +08:00: process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
2017-08-24 09:56 +08:00: process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
2017-08-24 09:56 +08:00: process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
register URL mapping: GET /article
register URL mapping: POST /article
process controller: comment.js...
register URL mapping: GET /comment
register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
register URL mapping: GET /
process controller: me.js...
register URL mapping: GET /me
process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
register URL mapping: GET /article
register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
2017-08-24 09:56 +08:00: process controller: postedit.js...
2017-08-24 09:56 +08:00: process controller: article.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /article
2017-08-24 09:56 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /comment
2017-08-24 09:56 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /
2017-08-24 09:56 +08:00: process controller: me.js...
2017-08-24 09:56 +08:00: register URL mapping: GET /me
process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
2017-08-24 09:57 +08:00: process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
2017-08-24 09:57 +08:00: process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
2017-08-24 09:57 +08:00: process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
2017-08-24 09:57 +08:00: process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
2017-08-24 09:57 +08:00: process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
2017-08-24 09:57 +08:00: process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
2017-08-24 09:57 +08:00: process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
2017-08-24 09:57 +08:00: process controller: article.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /article
2017-08-24 09:57 +08:00: register URL mapping: POST /article
process controller: comment.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /comment
2017-08-24 09:57 +08:00: register URL mapping: POST /comment
register URL mapping: POST /reply
process controller: index.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /
2017-08-24 09:57 +08:00: process controller: me.js...
2017-08-24 09:57 +08:00: register URL mapping: GET /me
2017-08-24 09:57 +08:00: process controller: postedit.js...
